[
    {
        "id": "32b9106a.4589e",
        "type": "tab",
        "label": "Serial I/O",
        "disabled": false,
        "info": ""
    },
    {
        "id": "754980e0.50707",
        "type": "tab",
        "label": "UI",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3ef5815c.6122be",
        "type": "serial-port",
        "serialport": "COM4",
        "serialbaud": "38400",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": ";",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "269a3122.a0068e",
        "type": "serial-port",
        "serialport": "COM18",
        "serialbaud": "38400",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": ";",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "ae70536c.3655",
        "type": "serial-port",
        "serialport": "/dev/USB0",
        "serialbaud": "57600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "1a348a8a.31fa05",
        "type": "serial-port",
        "serialport": "/dev/tty98",
        "serialbaud": "57600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "a6360e4a.825c5",
        "type": "serial in",
        "z": "32b9106a.4589e",
        "name": "App Port",
        "serial": "269a3122.a0068e",
        "x": 100,
        "y": 880,
        "wires": [
            [
                "6ce32ef0.5799f",
                "57802d90.f569d4",
                "4ef8b8ab.95c428"
            ]
        ]
    },
    {
        "id": "dfdc6e96.c6994",
        "type": "serial out",
        "z": "32b9106a.4589e",
        "name": "App Port",
        "serial": "269a3122.a0068e",
        "x": 700,
        "y": 727,
        "wires": []
    },
    {
        "id": "a11b25b2.41d828",
        "type": "serial in",
        "z": "32b9106a.4589e",
        "name": "Rig Port",
        "serial": "3ef5815c.6122be",
        "x": 100,
        "y": 680,
        "wires": [
            [
                "25b95575.0f35da",
                "96f5efe6.f320b",
                "1fa925f6.030a7a",
                "541ba4ba.17818c"
            ]
        ]
    },
    {
        "id": "3eb84881.bfc188",
        "type": "serial out",
        "z": "32b9106a.4589e",
        "name": "Rig Port",
        "serial": "3ef5815c.6122be",
        "x": 260,
        "y": 340,
        "wires": []
    },
    {
        "id": "25b95575.0f35da",
        "type": "function",
        "z": "32b9106a.4589e",
        "name": "USB  input",
        "func": "'use strict';\n\nconst p = msg.payload,\n      log_menu = flow.get('log_menu'),\n      log_s_meter = flow.get('log_s_meter'),\n      log_other = flow.get('log_other');\n\nif(p === 'log_menu') {\n    flow.set('log_menu', !log_menu);\n    node.status('Log menu - ' + !log_menu);\n}\nelse if(p === 'log_s_meter') {\n    flow.set('log_s_meter', !log_s_meter);\n    node.status('Log S-Meter - ' + !log_s_meter);\n}\nelse if(p === 'log_other') {\n    flow.set('log_other', !log_other);\n    node.status('Log Other - ' + !log_other);\n}\nelse if(p.substring(0,2) === 'EX') {\n    if(log_menu) {\n        node.log(p);\n    }\n}\nelse if(p.substring(0,3) === 'RM0') {\n    if(log_s_meter) {\n        node.log(p);\n    }\n}\nelse {\n    if(log_other) {\n        node.log(p);\n    }\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "\nflow.set('log_menu', false);\nflow.set('log_s_meter', false);\nflow.set('log_other', true);",
        "finalize": "",
        "x": 360,
        "y": 500,
        "wires": []
    },
    {
        "id": "6ce32ef0.5799f",
        "type": "function",
        "z": "32b9106a.4589e",
        "name": "pty  input",
        "func": "node.log(msg.payload);",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 300,
        "y": 907,
        "wires": []
    },
    {
        "id": "953f881.09fb578",
        "type": "function",
        "z": "32b9106a.4589e",
        "name": "USB output",
        "func": "'use strict';\n\nconst p = msg.payload;\n\nif(p.substring(0,2) === 'EX') {\n    if(p.substring(5,6) !== ';') {\n        node.log(p);\n    }\n}\nelse {\n    node.log(p);\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 270,
        "y": 280,
        "wires": []
    },
    {
        "id": "96f5efe6.f320b",
        "type": "function",
        "z": "32b9106a.4589e",
        "name": "Handle rig Input",
        "func": "'use strict;'\n\nconst RigSetting = global.get('RigSetting'),\n      RigState = global.get('RigState'),\n      needs_update = flow.get('needs_update'),\n      debounce = flow.get('debounce'),\n      p = msg.payload;\n\nif(p === '?;') {\n    node.send([{payload: '?; found in input'}, null, null]);\n}\n// else if(p.substring(0,2) !== 'VX') {\n\n// }\nelse if(p) {\n    const cmd = p.substring(0,2);\n    \n    let xp = p;\n    if(cmd === 'MR' || cmd === 'MT' || cmd === 'MW') {\n        xp = cmd + flow.get('last_' + cmd) + p.substring(5);\n    }\n\n    const rs = RigSetting.fromAnswer(xp);\n\n    // Send (or debounce) changes in rig state to GUI\n\n    if(rs.debounce) {\n\n        // Debounce the frequency changes\n\n        debounce[rs.name] = rs;\n        flow.set('debounce', debounce);\n        \n        RigState.setRigSetting(rs);\n    }\n    else if(rs.name === 'RM0') {\n        const tx_set = RigState.findRigSetting('tx_set_SET');\n\n        let xrs = null;\n\n        if(tx_set && tx_set.value) {\n            xrs = RigSetting.of('READ_METER-PO', rs.value);\n        }\n        else {\n            xrs = RigSetting.of('READ_METER-S_METER', rs.value);\n        }\n        \n        node.send([null, {payload: xrs}, null]);\n    }\n    else if(rs.name === 'RM2') {\n        const ms = RigState.getRigSetting('METER_SW');\n\n        switch(ms.value) {\n        case 'COMP':    xrs = RigSetting.of('READ_METER-COMP', rs.value); break;\n        case 'ALC':     xrs = RigSetting.of('READ_METER-ALC', rs.value); break;\n        case 'PO':      xrs = RigSetting.of('READ_METER-PO', rs.value); break;\n        case 'SWR':     xrs = RigSetting.of('READ_METER-SWR', rs.value); break;\n        case 'ID':      xrs = RigSetting.of('READ_METER-ID', rs.value); break;\n        case 'VDD':     xrs = RigSetting.of('READ_METER-VDD', rs.value); break;\n        default:\n            node.warn('Failed to find meter translation, RM: ' + rs.value + ', MS: ' + ms.value);\n            break;\n        }\n        \n        node.send([null, {payload: xrs}, null]);\n    }\n    else {\n\n        // Send changes to rig state in real time.\n\n        if(RigState.hasChanged(rs)) {\n            node.send([null, {payload: rs}, null]);\n        }\n    }\n\n    // Send any replies to queries back to tye aux tty\n\n    if(needs_update.length) {\n        const still_needs_updating = [];\n\n        needs_update.forEach(name => {\n            if(name === rs.name) {\n                node.send([null, null, {payload: rs.rawAnswer}]);\n            }\n            else {\n                still_needs_updating.push(name);\n            }\n        });\n        flow.set('needs_update', still_needs_updating);\n    }\n\n    // Cache non transient query commands\n\n    if(rs.isCacheable) {\n        RigState.setRigSetting(rs);\n    }\n}\nelse {\n    node.send(['Received empty payload?', null, null]);\n}\n\nnode.done();\n\nreturn [null, null, null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 687,
        "wires": [
            [],
            [
                "45ec207.8d001e"
            ],
            [
                "26f39226.04a21e"
            ]
        ],
        "outputLabels": [
            "Errors",
            "Event messsage bus",
            "pty output"
        ]
    },
    {
        "id": "57802d90.f569d4",
        "type": "function",
        "z": "32b9106a.4589e",
        "name": "Check cache",
        "func": "'use strict;'\n\nconst RigSetting = global.get('RigSetting'),\n      RigState = global.get('RigState'),\n      needs_update = flow.get('needs_update'),\n      p = msg.payload.toUpperCase();\n\nif(p) {\n    const rs = RigSetting.fromAnswer(p);\n\n    if(rs.desc === 'AUTO_INFORMATION') {\n        if(rs.value) {\n            node.warn('### Got AI1;');\n        }\n        else {\n            node.warn('### Got AI0;');\n        }\n        return [{payload: '?;'}, null];\n    }\n\n    // If a set command, forward it out to the rig\n\n    if(rs.sendToRig) {\n        return [null, {payload: rs.rawAnswer}];\n    }\n\n    // See if answer is already in cache\n\n    const crs = RigState.findRigSetting(rs.name);\n\n    if(crs) {\n        \n        // In cache, return answer\n\n        return [{payload: crs.rawAnswer}, null];\n    }\n\n    // Not in cache, let rig input handler know the answer needs\n    // to passed along.\n\n    needs_update.push(rs.name);\n    flow.set('needs_update', needs_update);\n\n    // Non-cacheable commands always go out, as well\n    // as cache misses\n    \n    return [null, {payload: p}];\n}\n\nnode.warn('Received empty payload?');\n\nreturn [null, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 310,
        "y": 847,
        "wires": [
            [
                "26f39226.04a21e"
            ],
            [
                "645b9407.6e9b6c"
            ]
        ],
        "outputLabels": [
            "pty output",
            "SERIAL_OUT"
        ]
    },
    {
        "id": "26f39226.04a21e",
        "type": "function",
        "z": "32b9106a.4589e",
        "name": "pty output",
        "func": "node.log(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 727,
        "wires": [
            [
                "dfdc6e96.c6994"
            ]
        ]
    },
    {
        "id": "ac982a5d.0e3cb8",
        "type": "comment",
        "z": "32b9106a.4589e",
        "name": "NOTE: The global and this flow's context values are defined in the Setup tab of this function",
        "info": "",
        "x": 330,
        "y": 60,
        "wires": []
    },
    {
        "id": "428c5065.ae15f",
        "type": "function",
        "z": "32b9106a.4589e",
        "name": "RigSetting & RigState",
        "func": "\n// RigSetting & RigState are under the Setup tab\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "'use strict;'\n\nfunction isEmptyValue(value) {\n    if(typeof(value) === 'string' && value.length === 0) {\n        return true;\n    }\n\n    if(value === null || value === undefined) {\n        return true\n    }\n\n    return false;\n}\n\nfunction intValue(value) {\n    if(isEmptyValue(value)) {\n        return null;\n    }\n    return parseInt(value, 10);\n}\n\nfunction pad(len) {\n    return function(value) {\n        let n = typeof(value) === 'string' ? value : value.toString();\nvalue.substring\n        while(n.length < len) {\n            n = '0' + n;\n        }\n\n        return n;\n    };\n}\nconst pad2 = pad(2);\nconst pad3 = pad(3);\nconst pad4 = pad(4);\nconst pad9 = pad(9);\n\nfunction map_reverse(obj) {\n    const result = {};\n\n    for(const [key, value] of Object.entries(obj)) {\n        result[value] = key;\n    }\n\n    return result;\n}\n\nconst cat_to_ctcss = {\n    '000': '67.0', '001': '69.3', '002': '71.9', '003': '74.4',\n    '004': '77.0', '005': '79.7', '006': '82.5', '007': '85.4',\n    '008': '88.5', '009': '91.5', '010': '94.8', '011': '97.4',\n    '012': '100.0', '013': '103.5', '014': '107.2', '015': '110.9',\n    '016': '114.8', '017': '118.8', '018': '123.0', '019': '127.3',\n    '020': '131.8', '021': '136.5', '022': '141.3', '023': '146.2',\n    '024': '151.4', '025': '156.7', '026': '159.8', '027': '162.2',\n    '028': '165.5', '029': '167.9', '030': '171.3', '031': '173.8',\n    '032': '177.3', '033': '179.9', '034': '183.5', '035': '186.2',\n    '036': '189.9', '037': '192.8', '038': '196.6', '039': '199.5',\n    '040': '203.5', '041': '206.5', '042': '210.7', '043': '218.1',\n    '044': '225.7', '045': '229.1', '046': '233.6', '047': '241.8',\n    '048': '250.3', '049': '254.1'\n};\nconst ctcss_to_cat = map_reverse(cat_to_ctcss);\n\nconst cat_to_CT = {\n    '0': 'CTCSS OFF',\n    '1': 'CTCSS ENC/DEC',\n    '2': 'CTCSS ENC',\n    '3': 'DCS ENC/DEC',\n    '4': 'DCS ENC'\n};\nconst CT_to_cat = map_reverse(cat_to_CT);\n\nconst cat_to_dcs = [\n     23,  25,  26,  31,  32,  36,  43,  47,  51,  53,  54,  65,  71,  72,\n     73,  74, 114, 115, 116, 122, 125, 131, 132, 134, 143, 145, 152, 155,\n    156, 162, 165, 172, 174, 205, 212, 223, 225, 226, 243, 244, 245, 246,\n    251, 252, 255, 261, 263, 265, 266, 271, 274, 306, 311, 315, 325, 331,\n    332, 343, 346, 351, 356, 364, 365, 371, 411, 412, 413, 423, 431, 432,\n    445, 446, 452, 454, 455, 462, 464, 465, 466, 503, 506, 516, 523, 526,\n    532, 546, 565, 606, 612, 624, 627, 631, 632, 654, 662, 664, 703, 712,\n    723, 731, 732, 734, 743, 754\n];\n\nconst band_to_cat = {\n    '1.8 MHz': '00',\n    '3.5 MHz': '01',\n    '5 MHz': '02',\n    '7 MHz': '03',\n    '10 MHz': '04',\n    '14 MHz': '05',\n    '18 MHz': '06',\n    '21 MHz': '07',\n    '24.5 MHz': '08',\n    '28 MHz': '09',\n    '50 MHz': '10',\n    'GEN': '11',\n    'MW': '12',\n    'AIR': '14',\n    '144 MHz': '15',\n    '430 MHz': '16'\n}\n\nconst cat_to_agc = {\n    '0': 'OFF',\n    '1': 'FAST',\n    '2': 'MID',\n    '3': 'SLOW',\n    '4': 'AUTO-FAST',\n    '5': 'AUTO-MID',\n    '6': 'AUTO-SLOW'\n};\nconst agc_to_cat = {\n    'OFF': '0',\n    'FAST': '1',\n    'MID': '2',\n    'SLOW': '3',\n    'AUTO': '4',\n    'AUTO-FAST': '4',\n    'AUTO-MID': '4',\n    'AUTO-SLOW': '4'\n};\n\nconst cat_meter = {\n    '0': 'COMP',\n    '1': 'ALC',\n    '2': 'PO',\n    '3': 'SWR',\n    '4': 'ID',\n    '5': 'VDD'\n};\nconst meter_cat = map_reverse(cat_meter);\n\nconst cat_modes = {\n    1: 'LSB',\n    2: 'USB',\n    3: 'CW',\n    4: 'FM',\n    5: 'AM',\n    6: 'RTTY-LSB',\n    7: 'CW-R',\n    8: 'DATA-LSB',\n    9: 'RTTY-USB',\n    A: 'DATA-FM',\n    B: 'FM-N',\n    C: 'DATA-USB',\n    D: 'AM-N',\n    E: 'C4FM'\n};\nconst modes_cat = map_reverse(cat_modes);\n\nconst cat_offset = {\n    0: 'Simplex',\n    1: '+',\n    2: '-'\n};\nconst offset_cat = map_reverse(cat_offset);\n\nconst cat_preamp = {\n    '0': 'IPO',\n    '1': 'AMP1',\n    '2': 'AMP2'\n};\nconst preamp_cat = map_reverse(cat_preamp);\n\nfunction sendCmd(cmd) {\n    return this._rc.cmd + ';';\n}\nfunction sendCmd0(cmd) {\n    return this._rc.cmd + '0' + ';';\n}\n\nfunction fromBoolean(value) {\n    if(isEmptyValue(value)) {\n        return null;\n    }\n    return value.substring(0, 1) === '1';\n}\nfunction toCatBoolean() {\n    return this._rc.cmd + (this.value ? '1' : '0') + ';';\n}\n\nfunction fromInteger(value) {\n    return intValue(value);\n}\nfunction asInteger() {\n    return this._rc.cmd + pad3(this.value) + ';';\n}\n\nfunction band_info(value) {\n    return {\n        raw: value,\n        mem_chan: intValue(value.substring(0,3)),\n        freq: intValue(value.substring(3,12)),\n        clarifier: value.substring(12,17),\n        rx_clar: value.substring(17, 18) != '0',\n        tx_clar: value.substring(18, 19) != '0',\n        mode: cat_modes[value.substring(19, 20)] || value.substring(21, 22),\n        p7: value.substring(20, 21),\n        tone: value.substring(21, 22),\n        offset: cat_offset[value.substring(24, 25)],\n        tag: value.substring(26),\n    };\n}\n\nconst rig_commands = {\n    'AB': {                       // TODO: Needs testing\n        cmd: 'AB',\n        desc: 'VFO-A_TO_VFO-B',\n        asSet: sendCmd,\n    },\n    'AC': {\n        cmd: 'AC',\n        desc: 'ANTENNA_TUNER_CONTROL',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            switch(this.value) {\n            case 'off': return this._rc.cmd + '000' + ';';\n            case 'on':  return this._rc.cmd + '001' + ';';\n            case 'tune':return this._rc.cmd + '002' + ';';\n            }\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            switch(value.substring(2, 3)) {\n            case '0':   return 'off';\n            case '1':   return 'on';\n            case '2':   return 'tune';\n            }\n        },\n    },\n    'AG': {\n        cmd: 'AG',\n        desc: 'AF_GAIN',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + pad3(this.value) + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return intValue(value.substring(1, 4));\n        }\n    },\n    'AI': {\n        cmd: 'AI',\n        desc: 'AUTO_INFORMATION',\n        asSetValue: toCatBoolean,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'AM': {                       // TODO: Needs testing\n        cmd: 'AM',\n        desc: 'VFO-A_TO_MEMORY_CHANNEL',\n        asSet: sendCmd,\n    },\n    'BA': {                       // TODO: Needs testing\n        cmd: 'BA',\n        desc: 'VFO-B_TO_VFO-A',\n        asSet: sendCmd,\n    },\n    'BC': {\n        cmd: 'BC',\n        desc: 'AUTO_NOTCH',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + (this.value ? '1' : '0') + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return fromBoolean(value.substring(1, 2));\n        }\n    },\n    'BD0': {                       // TODO: Needs testing\n        cmd: 'BD0',\n        desc: 'BAND_DOWN',\n        asSet: sendCmd,\n    },\n    'BI': {\n        cmd: 'BI',\n        desc: 'BREAK-IN',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + (this.value ? '1' : '0') + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'BP00': {                       // TODO: Needs testing\n        cmd: 'BP00',\n        desc: 'MANUAL_NOTCH_ON/OFF',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '00' + (this.value ? '1' : '0') + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return fromBoolean(value.substring(2,3));\n        },\n    },\n    'BP01': {                       // TODO: Needs testing\n        cmd: 'BP01',\n        desc: 'MANUAL_NOTCH_LEVEL',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + pad3(this.value / 10) + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            const r = intValue(value);\n\n            if(r === null) {\n                return null;\n            }\n\n            return r * 10;\n        },\n    },\n    'BS': {                       // TODO: Needs testing\n        cmd: 'BS',\n        desc: 'BAND_SELECT',\n        asSetValue() {\n            if(band_to_cat.hasOwnProperty(this.value)) {\n                return this._rc.cmd + band_to_cat[this.value] + ';';\n            }\n\n            throw new Error('Unknown band type: ' + this.value);\n        },\n    },\n    'BU0': {                       // TODO: Needs testing\n        cmd: 'BU0',\n        desc: 'BAND_UP',\n        asSet: sendCmd,\n    },\n    'BY': {                       // TODO: Needs testing\n        cmd: 'BY',\n        desc: 'BUSY',\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return fromBoolean(value.substring(1,2));\n        },\n    },\n    'CH0': {                       // TODO: Needs testing\n        cmd: 'CH0',\n        desc: 'CHANNEL_UP',\n        asSet: sendCmd,\n    },\n    'CH1': {                       // TODO: Needs testing\n        cmd: 'CH1',\n        desc: 'CHANNEL_DOWN',\n        asSet: sendCmd,\n    },\n    'CN00': {\n        cmd: 'CN00',\n        desc: 'CTCSS_TONE_FREQUENCY',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + ctcss_to_cat[this.value] + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return cat_to_ctcss[value];\n        },\n    },\n    'CN01': {\n        cmd: 'CN01',\n        desc: 'DCS_TONE_FREQUENCY',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + pad3(cat_to_dcs.indexOf(intValue(this.value))) + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            const dcs = cat_to_dcs[intValue(value)];\n\n            return (dcs < 100 ? '0' : '') + dcs.toString();\n        },\n    },\n    'CO00': {                       // TODO: Needs testing\n        cmd: 'CO00',\n        desc: 'CONTOUR_ON/OFF',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '000' + (this.value ? '1' : '0') + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return fromBoolean(value.substring(3, 4))\n        },\n    },\n    'CO01': {                       // TODO: Needs testing\n        cmd: 'CO01',\n        desc: 'CONTOUR_FREQ',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + pad4(this.value) + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'CO02': {                       // TODO: Needs testing\n        cmd: 'CO02',\n        desc: 'APF_ON/OFF',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '000' + (this.value ? '1' : '0') + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return fromBoolean(value.substring(3, 4))\n        },\n    },\n    'CO03': {                       // TODO: Needs testing\n        cmd: 'CO03',\n        desc: 'APF_FREQ',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + pad4((this.value + 250) / 10) + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            const r = intValue(value);\n\n            if(r === null) {\n                return null;\n            }\n\n            return (r * 10) - 250;\n        },\n    },\n    'CS': {\n        cmd: 'CS',\n        desc: 'CW_SPOT',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: toCatBoolean,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'CT': {\n        cmd: 'CT',\n        desc: 'CTCSS',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + CT_to_cat[this.value] + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return cat_to_CT[value.substring(1, 2)];\n        },\n    },\n    'DA': {\n        cmd: 'DA',\n        desc: 'DIMMER',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '00' + pad2(this.value.led) + pad2(this.value.tft) + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return {\n                led: intValue(value.substring(2, 4)),\n                tft: intValue(value.substring(4))\n            };\n        },\n    },\n    'DN': {                       // TODO: Needs testing\n        cmd: 'DN',\n        desc: 'MIC_DOWN',\n        asSet: sendCmd,\n    },\n    'DT0': {\n        cmd: 'DT0',\n        desc: 'DATE',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + this.value + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return value;\n        },\n    },\n    'DT1': {\n        cmd: 'DT1',\n        desc: 'TIME',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + this.value + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return value;\n        },\n    },\n    'DT2': {\n        cmd: 'DT2',\n        desc: 'TIME_DIFFERENTIAL',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + this.value + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return value;\n        },\n    },\n    'ED': {                       // TODO:\n        cmd: 'ED',\n        desc: 'ENCORDER_DOWN',\n    },\n    'EK': {                       // TODO: Needs testing\n        cmd: 'EK',\n        desc: 'ENT_KEY',\n        asSet: sendCmd,\n    },\n    'EU': {                       // TODO:\n        cmd: 'EU',\n        desc: 'ENCORDER_UP',\n    },\n    'EX': {\n        cmd: 'EX',\n        desc: 'MENU',\n        isCacheable: true,\n        isMenu: true,\n        asSetValue() {\n            return this._rc.cmd + pad3(this.value.no) + this.value.value + ';';\n        },\n        asReadValue() {\n            return this._rc.cmd + pad3(this.value.no) + ';';\n        },\n        fromAnswer(value) {\n            return {\n                no: intValue(value.substring(0, 3)),\n                value: value.substring(3)\n            };\n        },\n    },\n    'FA': {\n        cmd: 'FA',\n        desc: 'FREQUENCY_VFO-A',\n        autoInit: true,\n        // debounce: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + pad9(this.value) + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return intValue(value);\n        },\n    },\n    'FB': {\n        cmd: 'FB',\n        desc: 'FREQUENCY_VFO-B',\n        autoInit: true,\n        // debounce: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + pad9(this.value) + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return intValue(value);\n        },\n    },\n    'FS': {\n        cmd: 'FS',\n        desc: 'FAST_STEP',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: toCatBoolean,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'FT': {                       // TODO:\n        cmd: 'FT',\n        desc: 'FUNCTION_TX',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            if(this.value === 'VFO-A Band Transmitter: TX') {\n                return this._rc.cmd + '2' + ';';\n            }\n            if(this.value === 'VFO-B Band Transmitter: TX') {\n                return this._rc.cmd + '3' + ';';\n            }\n            throw new Error(this._rc.cmd + ' value ' + this.value + ' unknown');\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return value === '0' ? 'VFO-A Band Transmitter: TX' : 'VFO-B Band Transmitter: TX';\n        }\n    },\n    'GT': {                       // TODO: Needs testing\n        cmd: 'GT',\n        desc: 'AGC_FUNCTION',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + agc_to_cat[this.value] + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return cat_to_agc[value.substring(1, 2)];\n        },\n    },\n    'ID': {\n        cmd: 'ID',\n        desc: 'IDENTIFICATION',\n        autoInit: true,\n        isCacheable: true,\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return value;\n        },\n    },\n    'IF': {                       // TODO: Needs testing\n        cmd: 'IF',\n        desc: 'INFORMATION',\n        autoInit: true,\n        // debounce: true,\n        isCacheable: true,\n        asRead: sendCmd,\n        fromAnswer: band_info,\n    },\n    'IS': {\n        cmd: 'IS',\n        desc: 'IF-SHIFT',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + this.value + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return value.substring(1);\n        },\n    },\n    'KM': {                       // TODO: Needs testing\n        cmd: 'KM',\n        desc: 'KEYER_MEMORY',\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + this.value.no.toString() + this.value.message + ';';\n        },\n        asRead() {\n            return this._rc.cmd + this.value.toString() + ';';\n        },\n        fromAnswer(value) {\n            return {\n                no: value.substring(0,1),\n                message: value.substring(1),\n            };\n        },\n    },\n    'KP': {                       // TODO: Needs testing\n        cmd: 'KP',\n        desc: 'KEY_PITCH',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + pad2(this.value / 10 - 30) + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return (intValue(value) + 30) * 10;\n        },\n    },\n    'KR': {\n        cmd: 'KR',\n        desc: 'KEYER',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: toCatBoolean,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'KS': {\n        cmd: 'KS',\n        desc: 'KEY_SPEED',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: asInteger,\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'KY': {\n        cmd: 'KY',\n        desc: 'CW_KEYING',\n        asSetValue() {\n            throw new Error(this._rc.cmd + ' Not implemented yet');\n        },\n    },\n    'LK': {\n        cmd: 'LK',\n        desc: 'LOCK',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: toCatBoolean,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'LM': {\n        cmd: 'LM',\n        desc: 'LOAD_MESSEGE',\n        isCacheable: true,\n        asSetValue() {\n            throw new Error(this._rc.cmd + ' Not implemented yet');\n        },\n        asRead(cmd) {\n            throw new Error(this._rc.cmd + ' Not implemented yet');\n        },\n        fromAnswer(value) {\n            throw new Error(_rc.cmd + ' Not implemented yet');\n        },\n    },\n    'MA': {\n        cmd: 'MA',\n        desc: 'MEMORY_CHANNEL_TO_VFO-A',\n    },\n    'MC': {\n        cmd: 'MC',\n        desc: 'MEMORY_CHANNEL',\n        asSetValue() {\n            throw new Error(this._rc.cmd + ' Not implemented yet');\n        },\n        asRead(cmd) {\n            throw new Error(this._rc.cmd + ' Not implemented yet');\n        },\n    },\n    'MD': {\n        cmd: 'MD',\n        desc: 'MODE',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + modes_cat[this.value] + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return cat_modes[value.substring(1, 2)];\n        },\n    },\n    'MG': {\n        cmd: 'MG',\n        desc: 'MIC_GAIN',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: asInteger,\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'ML0': {\n        cmd: 'ML0',\n        desc: 'MONITOR_ON/OFF',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '00' + (this.value ? '1' : '0') + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return fromBoolean(value.substring(2,3));\n        },\n    },\n    'ML1': {\n        cmd: 'ML1',\n        desc: 'MONITOR_LEVEL',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + pad3(this.value) + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return intValue(value);\n        },\n    },\n    'MR': {\n        cmd: 'MR',\n        desc: 'MEMORY_CHANNEL_READ',\n        asSetValue() {\n            throw new Error(this._rc.cmd + ' Not implemented yet');\n        },\n        asRead(cmd) {\n            throw new Error(this._rc.cmd + ' Not implemented yet');\n        },\n    },\n    'MS': {\n        cmd: 'MS',\n        desc: 'METER_SW',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + meter_cat[this.value] + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return cat_meter[value.substring(0,1)];\n        },\n    },\n    'MT': {\n        cmd: 'MT',\n        desc: 'MEMORY_CHANNEL_WRITE/TAG',\n        asSetValue() {\n            throw new Error(this._rc.cmd + ' Not implemented yet');\n        },\n        asRead(cmd) {\n            throw new Error(this._rc.cmd + ' Not implemented yet');\n        },\n    },\n    'MW': {\n        cmd: 'MW',\n        desc: 'MEMORY_CHANNEL_WRITE',\n        asSetValue() {\n            throw new Error(this._rc.cmd + ' Not implemented yet');\n        },\n        asRead(cmd) {\n            throw new Error(this._rc.cmd + ' Not implemented yet');\n        },\n    },\n    'MX': {\n        cmd: 'MX',\n        desc: 'MOX_SET',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: toCatBoolean,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'NA': {\n        cmd: 'NA',\n        desc: 'NARROW',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + (this.value ? '1' : '0') + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return fromBoolean(value.substring(1, 2));\n        },\n    },\n    'NB': {\n        cmd: 'NB',\n        desc: 'NOISE_BLANKER_STATUS',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + (this.value.substring(1, 2) ? '1' : '0') + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return fromBoolean(value.substring(1, 2));\n        },\n    },\n    'NL': {\n        cmd: 'NL',\n        desc: 'NOISE_BLANKER_LEVEL',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + pad3(this.value) + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return intValue(value.substring(1));\n        },\n    },\n    'NR': {\n        cmd: 'NR',\n        desc: 'NOISE_REDUCTION',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + (this.value ? '1' : '0') + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return fromBoolean(value.substring(1, 2));\n        },\n    },\n    'OI': {\n        cmd: 'OI',\n        desc: 'OPPOSITE_BAND_INFORMATION',\n        autoInit: true,\n        // debounce: true,\n        isCacheable: true,\n        asRead: sendCmd,\n        fromAnswer: band_info,\n    },\n    'OS': {\n        cmd: 'OS',\n        desc: 'OFFSET_(REPEATER_SHIFT)',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + offset_cat[this.value] + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return cat_offset[value.substring(1, 2)];\n        },\n    },\n    'PA': {\n        cmd: 'PA',\n        desc: 'PRE-AMP_(IPO)',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + preamp_cat[this.value] + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return cat_preamp[value.substring(1, 2)];\n        },\n    },\n    'PB': {\n        cmd: 'PB',\n        desc: 'PLAY_BACK',\n        asSetValue() {\n            throw new Error(this._rc.cmd + ' Not implemented yet');\n        },\n        asReadValue() {\n            throw new Error(this._rc.cmd + ' Not implemented yet');\n        },\n        fromAnswer(value) {\n            throw new Error(this._rc.cmd + ' Not implemented yet');\n        },\n    },\n    'PC': {\n        cmd: 'PC',\n        desc: 'POWER_CONTROL',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: asInteger,\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'PL': {\n        cmd: 'PL',\n        desc: 'SPEECH_PROCESSOR_LEVEL',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: asInteger,\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'PR0': {\n        cmd: 'PR0',\n        desc: 'SPEECH_PROCESSOR_ON/OFF',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: toCatBoolean,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'PR1': {\n        cmd: 'PR1',\n        desc: 'PARAMETRIC_MICROPHONE_EQUALIZER',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: toCatBoolean,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'PS': {\n        cmd: 'PS',\n        desc: 'POWER_SWITCH',\n        autoInit: true,\n        asSetValue: toCatBoolean,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'QI': {\n        cmd: 'QI',\n        desc: 'QMB_STORE',\n        asSet: sendCmd,\n    },\n    'QR': {\n        cmd: 'QR',\n        desc: 'QMB_RECALL',\n        asSet: sendCmd,\n    },\n    'QS': {\n        cmd: 'QS',\n        desc: 'QUICK_SPLIT',\n        asSet: sendCmd,\n    },\n    'RA': {\n        cmd: 'RA',\n        desc: 'RF_ATTENUATOR',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + (this.value ? '1' : '0') + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return fromBoolean(value.substring(1, 2));\n        },\n    },\n    'RC': {\n        cmd: 'RC',\n        desc: 'CLAR_CLEAR',\n        asSet: sendCmd,\n    },\n    'RD': {\n        cmd: 'RD',\n        desc: 'CLAR_DOWN',\n        asSetValue() {\n            return this._rc.cmd + pad4(this.value) + ';';\n        },\n    },\n    'RG': {\n        cmd: 'RG',\n        desc: 'RF_GAIN',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + pad3(this.value) + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return intValue(value.substring(1, 4));\n        },\n    },\n    'RI0': {\n        cmd: 'RI0',\n        desc: 'RADIO_INFORMATION-HI-SWR',\n        autoInit: true,\n        isCacheable: true,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'RI3': {\n        cmd: 'RI3',\n        desc: 'RADIO_INFORMATION-REC',\n        autoInit: true,\n        isCacheable: true,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'RI4': {\n        cmd: 'RI4',\n        desc: 'RADIO_INFORMATION-PLAY',\n        autoInit: true,\n        isCacheable: true,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'RI5': {\n        cmd: 'RI5',\n        desc: 'RADIO_INFORMATION-VFO-A_TX',\n        autoInit: true,\n        isCacheable: true,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'RI6': {\n        cmd: 'RI6',\n        desc: 'RADIO_INFORMATION-VFO-B_TX',\n        autoInit: true,\n        isCacheable: true,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'RI7': {\n        cmd: 'RI7',\n        desc: 'RADIO_INFORMATION-VFO-A_RX',\n        autoInit: true,\n        isCacheable: true,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'RIA': {\n        cmd: 'RIA',\n        desc: 'RADIO_INFORMATION-TX_LED',\n        autoInit: true,\n        isCacheable: true,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'RL': {\n        cmd: 'RL',\n        desc: 'NOISE_REDUCTION_LEVEL',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + pad2(this.value) + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return intValue(value.substring(1, 3));\n        },\n    },\n    'RM0': {\n        cmd: 'RM0',\n        desc: 'READ_METER-FRONT_PANEL',\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'RM1': {\n        cmd: 'RM1',\n        desc: 'READ_METER-S_METER',\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'RM2': {\n        cmd: 'RM2',\n        desc: 'READ_METER-OTHER_METER',\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'RM3': {\n        cmd: 'RM3',\n        desc: 'READ_METER-COMP',\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'RM4': {\n        cmd: 'RM4',\n        desc: 'READ_METER-ALC',\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'RM5': {\n        cmd: 'RM5',\n        desc: 'READ_METER-PO',\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'RM6': {\n        cmd: 'RM6',\n        desc: 'READ_METER-SWR',\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'RM7': {\n        cmd: 'RM7',\n        desc: 'READ_METER-ID',\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'RM8': {\n        cmd: 'RM8',\n        desc: 'READ_METER-VDD',\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'RS': {\n        cmd: 'RS',\n        desc: 'RADIO_STATUS',\n        autoInit: true,\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return value === '0' ? 'NORMAL MODE' : 'MENU MODE';\n        },\n    },\n    'RT': {\n        cmd: 'RT',\n        desc: 'CLAR',\n        autoInit: true,\n        isCacheable: true,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'RU': {\n        cmd: 'RU',\n        desc: 'RX_CLARIFIER_PLUS_OFFSET',\n        asSetValue() {\n            return this._rc.cmd + pad4(this.value) + ';';\n        },\n    },\n    'SC': {\n        cmd: 'SC',\n        desc: 'SCAN',\n        asSetValue() {\n            switch(this.value) {\n            case 'off': return this._rc.cmd + '0' + ';';\n            case 'up':  return this._rc.cmd + '1' + ';';\n            case 'down':return this._rc.cmd + '2' + ';';\n            }\n        },\n    },\n    'SD': {\n        cmd: 'SD',\n        desc: 'CW_BREAK-IN_DELAY_TIME',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + pad4(this.value) + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'SH': {\n        cmd: 'SH',\n        desc: 'WIDTH',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + pad2(this.value) + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return intValue(value.substring(1, 3));\n        },\n    },\n    'SM': {\n        cmd: 'SM',\n        desc: 'S-METER_READING',\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return intValue(value.substring(1, 4));\n        },\n    },\n    'SQ': {\n        cmd: 'SQ',\n        desc: 'SQUELCLH_LEVEL',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + '0' + pad3(this.value) + ';';\n        },\n        asRead: sendCmd0,\n        fromAnswer(value) {\n            return intValue(value.substring(1, 4));\n        },\n    },\n    'SV': {\n        cmd: 'SV',\n        desc: 'SWAP_VFO',\n        asSet: sendCmd,\n    },\n    'TS': {\n        cmd: 'TS',\n        desc: 'TXW',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: toCatBoolean,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'TX': {\n        cmd: 'TX',\n        desc: 'TX_SET',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + (this.value ? '1' : '0') + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return !(value === '0');\n        },\n    },\n    'UL': {\n        cmd: 'UL',\n        desc: 'PLL_UNLOCK_STATUS',\n        autoInit: true,\n        isCacheable: true,\n        asRead: sendCmd,\n        fromAnswer(value) {\n            return value === '0' ? 'Lock' : 'Unlock';\n        },\n    },\n    'UP': {\n        cmd: 'UP',\n        desc: 'UP',\n        asSet: sendCmd,\n    },\n    'VD': {\n        cmd: 'VD',\n        desc: 'VOX_DELAY_TIME_/_DATA_VOX_DELAY_TIME',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue() {\n            return this._rc.cmd + pad4(this.value) + ';';\n        },\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'VG': {\n        cmd: 'VG',\n        desc: 'VOX_GAIN',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: asInteger,\n        asRead: sendCmd,\n        fromAnswer: fromInteger,\n    },\n    'VM': {\n        cmd: 'VM',\n        desc: 'V/M_KEY_FUNCTION',\n        asSet: sendCmd,\n    },\n    'VX': {\n        cmd: 'VX',\n        desc: 'VOX_STATUS',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: toCatBoolean,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'XT': {\n        cmd: 'XT',\n        desc: 'TX_CLAR',\n        autoInit: true,\n        isCacheable: true,\n        asSetValue: toCatBoolean,\n        asRead: sendCmd,\n        fromAnswer: fromBoolean,\n    },\n    'ZI': {\n        cmd: 'ZI',\n        desc: 'ZERO_IN',\n        asSet: sendCmd,\n    }\n};\n// flow.set('rig_commands', rig_commands);\n\nconst rig_desc = {};\nfor(const [key, value] of Object.entries(rig_commands)) {\n    if(!value.hasOwnProperty('desc')) {\n        throw new Error(key + ' does not have desc property');\n    }\n    if(rig_desc.hasOwnProperty(value.desc)) {\n        throw new Error(key + ' has duplicate desc property');\n    }\n\n    rig_desc[value.desc] = value;\n}\nflow.set('rig_desc', rig_desc);\n\nconst max_menu_length = Object.keys(rig_commands).map( k => k.length ).reduce( (a, v) => a > v ? a : v );\n\nfunction logNonPrintable(arg) {\n    node.log('arg length: ' + arg.length);\n    for (var i = 0; i < arg.length; i++) {\n        node.log('arg[' + i + ']: ' + arg.charCodeAt(i));\n    }\n}\n\nfunction findRigCommand(arg) {\n    if(rig_commands.hasOwnProperty(arg)) {\n        return rig_commands[arg];\n    }\n\n    if(arg.length <= 2) {\n        return null;\n    }\n\n    return findRigCommand(arg.substring(0, arg.length - 1));\n}\n\nconst RigSetting = class {\n    constructor(rc, value, raw_answer) {\n        this._rc = rc;\n        this._value = value;\n        this._raw_answer = raw_answer;\n    }\n\n    get desc() { return this._rc.desc; }\n    get value() { return this._value; }\n    get debounce() { return this._rc.debounce; }\n    get isMenu() { return this._rc.isMenu; }\n    get isCacheable() { return this._rc.isCacheable; }\n    get topic() { return this._rc.desc; }\n\n    get asSet() {\n        if(this._rc.hasOwnProperty('asSet')) {\n\t\t\treturn this._rc.asSet.call(this);\n        }\n\n        if(this._rc.hasOwnProperty('asSetValue')) {\n            if(isEmptyValue(this._value)) {\n                throw new Error(this._rc.desc + ' asSet() requires a value');\n            }\n\n\t\t\treturn this._rc.asSetValue.call(this);\n        }\n\n        throw new Error(this._rc.desc + ' does not have an asSet() function');\n    }\n\n    get asRead() {\n        if(this._rc.hasOwnProperty('asRead')) {\n\t\t\treturn this._rc.asRead.call(this);\n        }\n\n        if(this._rc.hasOwnProperty('asReadValue')) {\n            if(isEmptyValue(this._value)) {\n                throw new Error(this._rc.desc + ' asRead() requires a value');\n            }\n\n\t\t\treturn this._rc.asReadValue.call(this);\n        }\n\n        throw new Error(this._rc.cmd + ' does not have an asRead() function');\n    }\n\n    get autoInit() { \n        return this._rc.autoInit || (this._rc.cmd === 'MT' && !isEmptyValue(this._value));\n    }\n    \n    get sendToRig() {\n        const hasValue = !isEmptyValue(this._value),\n              hasSet = this._rc.hasOwnProperty('asSet'),\n              hasSetValue = this._rc.hasOwnProperty('asSetValue'),\n              hasRead = this._rc.hasOwnProperty('asRead'),\n              hasReadValue = this._rc.hasOwnProperty('asReadValue');\n\n        if(this.isMenu) {\n            return !isEmptyValue(this.value.value);\n        }\n\n        if(hasValue && hasSetValue && hasRead) {\n            return hasValue;\n        }\n\n        if((hasSet || hasSetValue) && !(hasRead || hasReadValue)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    get name() {\n        if(this._rc.isMenu) {\n            return this._rc.cmd + pad3(this._value.no);\n        }\n        return this._rc.cmd;\n    }\n\n    get rawAnswer() {\n        if(isEmptyValue(this._raw_answer)) {\n            throw new Error(this._rc.cmd + ' does not have original answer');\n        }\n\n        return this._raw_answer;\n    }\n\n    static of(desc, value) {\n        const rc = rig_desc[desc];\n\n        if(!rc) {\n            throw new Error('\"' + desc + '\" not found');\n        }\n\n        if(isEmptyValue(value)) {\n            new RigSetting(rc, null, null);\n        }\n\n        return new RigSetting(rc, value);\n    }\n\n    static fromAnswer(arg) {\n        let rc = findRigCommand(arg.substring(0, max_menu_length));\n\n        if(rc === null) {\n\n            // It looks like Winlink Express has a bug:\n            // At one point it sends a MD0C; with four leadnig\n            // ASCII nul (0x0) characters\n\n            node.warn('Failed to find rig command on first try, stripping any non-printable characters and retrying.')\n            // logNonPrintable(arg);\n\n            arg = arg.replace(/[^\\x20-\\x7E]+/g, \"\");\n            rc = findRigCommand(arg.substring(0, max_menu_length));\n        }\n\n        if(rc === null) {\n            throw new Error('Input not found in rig_commands: \"' + arg + '\"');\n        }\n\n        const value = arg.substring(arg.length - 1) === ';' ?  arg.substring(rc.cmd.length, arg.length - 1) : arg.substring(rc.cmd.length);\n\n        if(!rc.hasOwnProperty('fromAnswer')) {\n            throw new Error(rc.cmd + '.fromAnswer() not implemented');\n        }\n\n        if(isEmptyValue(value)) {\n            return new RigSetting(rc, null, arg);\n        }\n\n        return new RigSetting(rc, rc.fromAnswer(value), arg);\n    }\n\n    static *getAll() {\n        for(const rc of Object.values(rig_commands)) {\n            yield new RigSetting(rc, '', '');\n        }\n    }\n};\nglobal.set('RigSetting', RigSetting);\n\nconst rig_state = {};\nflow.set('rig_state', rig_state);\n\nconst RigState = {\n    findRigSetting(arg) {\n        if(rig_state.hasOwnProperty(arg)) {\n            return rig_state[arg];\n        }\n\n        if(rig_desc.hasOwnProperty(arg)) {\n            return rig_state[rig_desc[arg].cmd];\n        }\n\n        return null;\n    },\n    getRigSetting(arg) {\n        const rs = RigState.findRigSetting(arg);\n\n        if(rs) {\n            return rs;\n        }\n\n        throw new Error('Rig state \"' + arg + '\" not found');\n    },\n\n    setRigSetting(rs) {\n        rig_state[rs.name] = rs;\n    },\n\n    hasChanged(rs) {\n        if(!rig_state.hasOwnProperty(rs.name)) {\n            return true;\n        }\n\n        const crs = rig_state[rs.name];\n\n        return rs.rawAnswer !== crs.rawAnswer;\n    },\n\n    getAll() {\n        return Object.values(rig_state);\n    },\n}\nglobal.set('RigState', RigState);",
        "finalize": "",
        "x": 160,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "8f58f4c3.0a9ac8",
        "type": "inject",
        "z": "32b9106a.4589e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100.00000381469727,
        "y": 161.00000190734863,
        "wires": [
            [
                "a719940e.f96008"
            ]
        ],
        "l": false
    },
    {
        "id": "a719940e.f96008",
        "type": "function",
        "z": "32b9106a.4589e",
        "name": "Init",
        "func": "const RigSetting = global.get('RigSetting'),\n      ex001 = RigSetting.of('MENU', {no: 1, value: ''});\n\nglobal.set('diable_tx', false);\n\nnode.send({ payload: RigSetting.of('AUTO_INFORMATION', true).asSet });\n\nconst next_setting = Array.from(RigSetting.getAll()).filter( rs => rs.autoInit ).map( rs => rs.asRead );\n\nnext_setting.push(ex001.asRead);\n\nconst ns = next_setting.shift();\n\nflow.set('next_setting', next_setting);\nflow.set('next_menu_item', 2);\nflow.set('initial_load', true);\n\nreturn({ payload: ns });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "'use strict;'\n\nflow.set('needs_update', []);\n\nflow.set('debounce', {});",
        "finalize": "",
        "x": 210,
        "y": 160,
        "wires": [
            [
                "c2c1ca3a.540f18"
            ]
        ]
    },
    {
        "id": "3a8813f3.17702c",
        "type": "comment",
        "z": "32b9106a.4589e",
        "name": "Serial I/O handler",
        "info": "",
        "x": 100,
        "y": 220,
        "wires": []
    },
    {
        "id": "9bc357f4.ba8a68",
        "type": "function",
        "z": "32b9106a.4589e",
        "name": "Handle debounce",
        "func": "'use strict;'\n\nlet debounce = flow.get('debounce'),\n    last_state = flow.get('last_state');\n    \nfor (const [key, value] of Object.entries(debounce)) {\n\n  if(last_state.hasOwnProperty(key)) {\n\n      if(last_state[key] !== value.rawAnswer) {\n          last_state[key] = value.rawAnswer;\n          \n          node.send({payload: value});\n      }\n  }\n  else {\n      last_state[key] = value.rawAnswer;\n      \n      node.send({payload: value});\n  }\n}\n\nflow.set('last_state', last_state);\n\nnode.done();\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\n\nflow.set('last_state', {});",
        "finalize": "",
        "x": 230,
        "y": 1000,
        "wires": [
            [
                "97ef5679.0df558"
            ]
        ]
    },
    {
        "id": "757a8c4c.6316a4",
        "type": "inject",
        "z": "32b9106a.4589e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 75,
        "y": 1000,
        "wires": [
            [
                "9bc357f4.ba8a68"
            ]
        ],
        "l": false
    },
    {
        "id": "541ba4ba.17818c",
        "type": "function",
        "z": "32b9106a.4589e",
        "name": "Poll Menu",
        "func": "'use strict';\n\nif(msg.payload.substring(0,2) === 'EX') {\n    const RigSetting = global.get('RigSetting');\n\n    let next_menu_item = flow.get('next_menu_item');\n    \n    if(next_menu_item === 154) {\n        next_menu_item = 1;\n        \n        if(flow.get('initial_load')) {\n            flow.set('initial_load', false);\n            \n            node.send([null, {payload: 'end_of_load'}]);\n        }\n    }\n    \n    flow.set('next_menu_item', next_menu_item + 1);\n\n    node.send([{ payload: RigSetting.of('MENU', {no: next_menu_item}).asRead }, null]);\n}\n\nnode.done();",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 300,
        "y": 620,
        "wires": [
            [
                "5c616613.9592b8"
            ],
            [
                "98fc3ded.a6f82"
            ]
        ]
    },
    {
        "id": "1fa925f6.030a7a",
        "type": "function",
        "z": "32b9106a.4589e",
        "name": "Load settings",
        "func": "\nconst next_setting = flow.get('next_setting');\n\nif(next_setting.length) {\n    const ns = next_setting.shift();\n\n    flow.set('next_setting', next_setting);\n\n    return { payload: ns };\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 310,
        "y": 760,
        "wires": [
            [
                "645b9407.6e9b6c"
            ]
        ]
    },
    {
        "id": "9725b52b.0bb248",
        "type": "link in",
        "z": "32b9106a.4589e",
        "name": "TO_RIG",
        "links": [
            "645b9407.6e9b6c",
            "5c616613.9592b8",
            "c2c1ca3a.540f18",
            "715ac9d7.085848",
            "92c129d1.ca9798",
            "5d213f36.1289e",
            "9fc8940d.188508",
            "f4dc38e4.d17288",
            "a85c9209.af998"
        ],
        "x": 65,
        "y": 320,
        "wires": [
            [
                "3eb84881.bfc188",
                "953f881.09fb578"
            ]
        ]
    },
    {
        "id": "645b9407.6e9b6c",
        "type": "link out",
        "z": "32b9106a.4589e",
        "name": "",
        "links": [
            "9725b52b.0bb248"
        ],
        "x": 495,
        "y": 800,
        "wires": []
    },
    {
        "id": "45ec207.8d001e",
        "type": "link out",
        "z": "32b9106a.4589e",
        "name": "",
        "links": [
            "c9974373.7da3a",
            "d52942d.1154bc"
        ],
        "x": 475,
        "y": 687,
        "wires": []
    },
    {
        "id": "97ef5679.0df558",
        "type": "link out",
        "z": "32b9106a.4589e",
        "name": "",
        "links": [
            "c9974373.7da3a"
        ],
        "x": 395,
        "y": 1000,
        "wires": []
    },
    {
        "id": "5c616613.9592b8",
        "type": "link out",
        "z": "32b9106a.4589e",
        "name": "",
        "links": [
            "9725b52b.0bb248"
        ],
        "x": 475,
        "y": 600,
        "wires": []
    },
    {
        "id": "c2c1ca3a.540f18",
        "type": "link out",
        "z": "32b9106a.4589e",
        "name": "",
        "links": [
            "9725b52b.0bb248"
        ],
        "x": 320.00000381469727,
        "y": 161.00000190734863,
        "wires": []
    },
    {
        "id": "2a578e9f.c8ed42",
        "type": "inject",
        "z": "32b9106a.4589e",
        "name": "Toggle Menu",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "log_menu",
        "payloadType": "str",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "25b95575.0f35da"
            ]
        ]
    },
    {
        "id": "fa733db6.a4e03",
        "type": "inject",
        "z": "32b9106a.4589e",
        "name": "Toggle S-Meter",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "log_s_meter",
        "payloadType": "str",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "25b95575.0f35da"
            ]
        ]
    },
    {
        "id": "dac2e650.b93638",
        "type": "inject",
        "z": "32b9106a.4589e",
        "name": "Toggle Other",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "log_other",
        "payloadType": "str",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "25b95575.0f35da"
            ]
        ]
    },
    {
        "id": "98fc3ded.a6f82",
        "type": "link out",
        "z": "32b9106a.4589e",
        "name": "",
        "links": [
            "c9974373.7da3a"
        ],
        "x": 475,
        "y": 640,
        "wires": []
    },
    {
        "id": "4ef8b8ab.95c428",
        "type": "debug",
        "z": "32b9106a.4589e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 960,
        "wires": []
    },
    {
        "id": "9974000f.5c378",
        "type": "debug",
        "z": "754980e0.50707",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 400,
        "wires": []
    },
    {
        "id": "364285b5.c8a42a",
        "type": "function",
        "z": "754980e0.50707",
        "name": "Handle UI Control Events",
        "func": "'use strict';\n\nif(msg.uibuilderCtrl === 'ready for content') {\n    return {payload: 'init_ui'};\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 580,
        "wires": [
            [
                "71455195.ed181"
            ]
        ]
    },
    {
        "id": "317eef3d.5efb3",
        "type": "comment",
        "z": "754980e0.50707",
        "name": "UI interface",
        "info": "",
        "x": 91.0000114440918,
        "y": 423.0000476837158,
        "wires": []
    },
    {
        "id": "1fc7fc32.d76254",
        "type": "function",
        "z": "754980e0.50707",
        "name": "alc_status",
        "func": "'use strict';\n\nif(msg.name === 'alc_meter') {\n    return {name: 'alc_status', value: msg.value > 5};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 180,
        "y": 880,
        "wires": [
            [
                "198028cd.446c17"
            ]
        ]
    },
    {
        "id": "19f4866f.810fea",
        "type": "comment",
        "z": "754980e0.50707",
        "name": "Data ALC status",
        "info": "",
        "x": 100,
        "y": 820,
        "wires": []
    },
    {
        "id": "5c876eb6.0ba87",
        "type": "comment",
        "z": "754980e0.50707",
        "name": "Init",
        "info": "",
        "x": 70,
        "y": 20,
        "wires": []
    },
    {
        "id": "d4e2ef23.4d67b",
        "type": "trigger",
        "z": "754980e0.50707",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "payl",
        "duration": "-250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 400,
        "y": 680,
        "wires": [
            [
                "9898d401.cafc38"
            ]
        ]
    },
    {
        "id": "d1750eb2.50213",
        "type": "function",
        "z": "754980e0.50707",
        "name": "Read ALC",
        "func": "'use strict';\n\nconst RigSetting = global.get('RigSetting');\n\nif(msg.name === 'transmit') {\n    if(msg.value) {\n        return {payload: RigSetting.of('READ_METER-ALC').asRead};\n    }\n    else {\n        return {reset: true};\n    }\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "d4e2ef23.4d67b"
            ]
        ]
    },
    {
        "id": "b6d57766.ce5298",
        "type": "trigger",
        "z": "754980e0.50707",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "payl",
        "duration": "-500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 400,
        "y": 720,
        "wires": [
            [
                "9898d401.cafc38"
            ]
        ]
    },
    {
        "id": "b60171a3.8c75a",
        "type": "function",
        "z": "754980e0.50707",
        "name": "Read SWR",
        "func": "'use strict';\n\nconst RigSetting = global.get('RigSetting');\n\nif(msg.name === 'transmit') {\n    if(msg.value) {\n        return {payload: RigSetting.of('READ_METER-SWR').asRead};\n    }\n    else {\n        return {reset: true};\n    }\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 190,
        "y": 720,
        "wires": [
            [
                "b6d57766.ce5298"
            ]
        ]
    },
    {
        "id": "d26427a5.8dde18",
        "type": "comment",
        "z": "754980e0.50707",
        "name": "Monitor ALC and SWR during transmit",
        "info": "",
        "x": 170,
        "y": 620,
        "wires": []
    },
    {
        "id": "49b93a5c.6f0374",
        "type": "uibuilder",
        "z": "754980e0.50707",
        "name": "",
        "topic": "",
        "url": "noderig",
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "showfolder": false,
        "useSecurity": false,
        "sessionLength": 432000,
        "tokenAutoExtend": false,
        "x": 381.0000114440918,
        "y": 523.0000476837158,
        "wires": [
            [
                "9974000f.5c378",
                "8c489ecb.12776"
            ],
            [
                "364285b5.c8a42a",
                "b27a72f2.e22a4"
            ]
        ]
    },
    {
        "id": "c2f548b2.8d3c18",
        "type": "function",
        "z": "754980e0.50707",
        "name": "Handle rig event",
        "func": "'use strict';\n\nfunction initUi() {\n    const OpModes = flow.get('OpModes'),\n          UiCache = flow.get('UiCache'),\n          MemoryChannels = flow.get('MemoryChannels');\n\n    OpModes.initUi( msg => node.send([msg, null, null]) );\n\n    UiCache.forEach( msg => node.send([msg, null, null]) );\n    \n    MemoryChannels.initUi( msg => node.send([msg, null, null]));\n}\n\nconst OpModes = flow.get('OpModes'),\n      rig_events = flow.get('rig_events'),\n      p = msg.payload;\n\nif(p === 'end_of_load') {\n    const tom = OpModes.checkTriggers();\n\n    if(tom) {\n        OpModes.loadOpMode(tom, (rc) => {\n            node.send([null, null, rc]);\n        });\n    }\n    else {\n        OpModes.loadLastOpMode( (rc) => {\n            node.send([null, null, rc]);\n        });\n    }\n    initUi();\n}\nelse if(p === 'init_ui') {\n    initUi();\n}\nelse if(rig_events.hasOwnProperty(p.topic)) {\n    const re = rig_events[p.topic],\n          UiCache = flow.get('UiCache');\n\n    re.emit(re.ui, p, msg => {\n        if(msg.ui) {\n            const ui = msg.ui;\n\n            if(ui.name === 'menu_item') {\n                UiCache.set(ui.no, ui);\n            }\n            else {\n                UiCache.set(ui.name, ui);\n            }\n        \n            if(OpModes.isReady()) {\n                const tom = OpModes.checkTriggers(ui);\n        \n                if(tom) {\n                    OpModes.loadOpMode(tom, (rc) => {\n                        node.send([null, null, rc]);\n                    });\n        \n                    initUi();\n                }\n            }\n        \n            node.send([ui, null, null]);\n        }\n        \n        if(msg.local) {\n            if(OpModes.isReady()) {\n                node.send([null, msg.local, null]);\n            }\n        }\n        \n        if(msg.rig) {\n            node.send([null, null, msg.rig]);\n        }\n    });\n}\n\nnode.done();",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 200,
        "y": 320,
        "wires": [
            [
                "758c6c17.f379c4"
            ],
            [
                "48e6d2f6.b56bdc"
            ],
            [
                "e57b66e0.917e48"
            ]
        ],
        "outputLabels": [
            "UI",
            "local",
            "Rig"
        ]
    },
    {
        "id": "9a92894d.fa32a8",
        "type": "function",
        "z": "754980e0.50707",
        "name": "rig_events & ui_events",
        "func": "\n// rig_events & ui_events are under the Setup tab\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "'use strict';\n\nconst RigSetting = global.get('RigSetting'),\n      RigState = global.get('RigState');\n\nfunction defaultEmit(name, rs, f) {\n    f({ui: {name: name, value: rs.value}});\n}\n\nfunction defaultHandler(event, value, f) {\n    if(event === 'set') {\n        f({rig: {payload: RigSetting.of(this.setting, value).asSet}});\n    }\n    else {\n        throw new Error(this.ui + ': unknown event: ' + event);\n    }\n}\n\nfunction simpleCommandHandler(event, value, f) {\n    f({rig: {payload: RigSetting.of(this.setting).asSet}});\n}\n\nfunction _toggle(event, om, uc, f) {\n    if(event === 'toggle_fav') {\n        om.fav = !(om.fav || false);\n    }\n\n    if(event === 'toggle_saved') {\n        om.saved = !(om.saved || false);\n    }\n\n    f({ui: uc});\n}\n\nfunction toggleHandler(event, value, f) {\n    if(event === 'toggle') {\n        const rs = RigState.getRigSetting(this.setting);\n\n        f({rig: {payload: RigSetting.of(this.setting, !rs.value).asSet}});\n        if(this.needsRead) {\n            f({rig: {payload: RigSetting.of(this.setting, !rs.value).asRead}});\n        }\n    }\n    else if(event === 'set') {\n        f({rig: {payload: RigSetting.of(this.setting, value).asSet}});\n    }\n    else {\n        throw new Error(this.ui + ': unknown event: ' + event);\n    }\n}\n        \nconst ui_config = [\n    {\n        setting: 'AF_GAIN',\n        ui: 'af_gain',\n        emit: defaultEmit,\n        handler: defaultHandler\n    },\n    {\n        setting: 'AGC_FUNCTION',\n    },\n    {\n        setting: 'ANTENNA_TUNER_CONTROL',\n        ui: 'tuner',\n        emit: defaultEmit,\n        handler(event, value, f) {\n            const ac = RigState.getRigSetting(this.setting);\n\n            if(event === 'click') {\n                f({rig: {payload: RigSetting.of(this.setting, ac.value === 'on' ? 'off' : 'on').asSet}});\n            }\n            else if(event === 'dblclick') {\n                f({rig: {payload: RigSetting.of(this.setting, 'tune').asSet}});\n                flow.set('atu_tuning', true);\n            }\n            else if(event === 'set') {\n                f({rig: {payload: RigSetting.of(this.setting, value).asSet}});\n            }\n            else {\n                throw new Error(this.ui + ': unknown event: ' + event);\n            }\n        },\n    },\n    {\n        setting: 'APF_FREQ',\n        ui: 'apf_freq',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'APF_ON/OFF',\n        ui: 'apf_on',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'AUTO_NOTCH',\n        ui: 'auto_notch',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'BAND_DOWN',\n    },\n    {\n        setting: 'BAND_SELECT',\n    },\n    {\n        setting: 'BAND_UP',\n    },\n    {\n        setting: 'BREAK-IN',\n        ui: 'break_in',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'BUSY',\n        ui: 'busy',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'CHANNEL_DOWN',\n    },\n    {\n        setting: 'CHANNEL_UP',\n    },\n    {\n        setting: 'CLAR',\n        ui: 'clar',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'CLAR_CLEAR',\n    },\n    {\n        setting: 'CLAR_DOWN',\n    },\n    {\n        setting: 'CONTOUR_FREQ',\n        ui: 'contour_freq',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'CONTOUR_ON/OFF',\n        ui: 'contour_on',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'CTCSS',\n        ui: 'ctcss',\n        emit(name, rs, f) {\n            f({ui: {name: this.ui, value: rs.value}});\n\n            switch(rs.value) {\n            case 'CTCSS OFF':\n                break;\n            case 'CTCSS ENC/DEC':\n            case 'CTCSS ENC':\n                f({rig: {payload: RigSetting.of('CTCSS_TONE_FREQUENCY').asRead}});\n                break;\n            case 'DCS ENC/DEC':\n            case'DCS ENC':\n                f({rig: {payload: RigSetting.of('DCS_TONE_FREQUENCY').asRead}});\n                break;\n            }\n        },\n        handler: defaultHandler,\n    },\n    {\n        setting: 'CTCSS_TONE_FREQUENCY',\n        ui: 'ctcss_tone_frequency',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'CW_BREAK-IN_DELAY_TIME',\n        ui: 'cw_break_in_delay_time',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'CW_KEYING',\n    },\n    {\n        setting: 'CW_SPOT',\n        ui: 'cw_spot',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'DATE',\n        ui: 'date',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'DCS_TONE_FREQUENCY',\n        ui: 'dcs_tone_frequency',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'DIMMER',\n    },\n    {\n        setting: 'ENCORDER_DOWN',\n    },\n    {\n        setting: 'ENCORDER_UP',\n    },\n    {\n        setting: 'ENT_KEY',\n    },\n    {\n        setting: 'FAST_STEP',\n        ui: 'fast_step',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'FREQUENCY_VFO-A',\n        ui: 'vfo_a',\n        emit(name, rs, f) {\n            f({ui: {name: name, value: rs.value}});\n        },\n        handler: defaultHandler,\n    },\n    {\n        setting: 'FREQUENCY_VFO-B',\n        ui: 'vfo_b',\n        emit(name, rs, f) {\n            f({ui: {name: name, value: rs.value}});\n        },\n        handler: defaultHandler,\n    },\n    {\n        setting: 'FUNCTION_TX',\n    },\n    {\n        setting: 'IDENTIFICATION',\n        ui: 'identification',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'IF-SHIFT',\n        ui: 'if_shift',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'INFORMATION',\n//        ui: 'information',\n//        emit: defaultEmit,\n//        handler: defaultHandler,\n    },\n    {\n        setting: 'KEYER',\n        ui: 'keyer',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'KEYER_MEMORY',\n    },\n    {\n        setting: 'KEY_PITCH',\n        ui: 'key_pitch',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'KEY_SPEED',\n        ui: 'key_speed',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'LOAD_MESSEGE',\n    },\n    {\n        setting: 'LOCK',\n        ui: 'lock',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'MANUAL_NOTCH_LEVEL',\n        ui: 'manual_notch_level',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'MANUAL_NOTCH_ON/OFF',\n        ui: 'manual_notch_on',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'MEMORY_CHANNEL',\n    },\n    {\n        setting: 'MEMORY_CHANNEL_READ',\n    },\n    {\n        setting: 'MEMORY_CHANNEL_TO_VFO-A',\n    },\n    {\n        setting: 'MEMORY_CHANNEL_WRITE',\n    },\n    {\n        setting: 'MEMORY_CHANNEL_WRITE/TAG',\n    },\n    {\n        ui: 'memory_channels',\n        handler(event, value, f) {\n            const MemoryChannels = flow.get('MemoryChannels');\n\n            switch(event) {\n            case 'load':\n                MemoryChannels.load(value, f);\n                break;\n\n            case 'remove':\n                MemoryChannels.remove(value);\n                MemoryChannels.initUi( msg => f({ui: msg}) );\n                break;\n\n            case 'update':\n                MemoryChannels.update(value);\n                MemoryChannels.initUi( msg => f({ui: msg}) );\n                break;\n                \n            case 'get_json':\n                MemoryChannels.getJson(f)\n                break;\n\n            case 'save_json':\n                try {\n                    const json = JSON.parse(value);\n                    const result = MemoryChannels.saveJson(json)\n\n                    if(!result) {\n                        MemoryChannels.initUi( msg => f({ui: msg}) );\n                    }\n\n                    f({ui: {name: 'json_validation', value: result}});\n                }\n                catch (error) {\n                    f({ui: {name: 'json_validation', value: error.message}});\n                }\n                break\n                \n            default:\n                node.warn('Unknown memory_channel event: ' + event);\n                break;\n            }\n        },\n    },\n    {\n        setting: 'MENU',\n        ui: 'menu_item',\n        emit(name, rs, f) {\n            const MenuItems = flow.get('MenuItems'),\n                  mv = MenuItems.toUi(rs.value.no, rs.value.value);\n\n            f({ui: {name: name, no: rs.value.no, value: mv}});\n        },\n        handler(event, value, f) {\n            if(event === 'set') {\n                const MenuItems = flow.get('MenuItems'),\n                      rv = MenuItems.fromUi(value.no, value.value);\n\n                f({rig: {payload: RigSetting.of(this.setting, {no: value.no, value: rv}).asSet}});\n            }\n            else if(event === 'toggle_fav' || event === 'toggle_saved') {\n                const OpModes = flow.get('OpModes'),\n                      com = OpModes.currentOpMode(),\n                      UiCache = flow.get('UiCache');\n\n                if(!com.menus.hasOwnProperty(value)) {\n                    com.menus[value] = {};\n                }\n                _toggle(event, com.menus[value], UiCache.get(value), f);\n            }\n            else {\n                throw new Error(this.ui + ': unknown event: ' + event);\n            }\n        },\n    },\n    {\n        setting: 'METER_SW',\n        ui: 'meter_sw',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'MIC_DOWN',\n    },\n    {\n        setting: 'MIC_GAIN',\n        ui: 'mic_gain',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'MODE',\n        ui: 'mode',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'MONITOR_LEVEL',\n        ui: 'monitor_level',\n        emit: defaultEmit,\n        handler: function(event, value, f) {\n            if(event === 'set') {\n                f({rig: {payload: RigSetting.of('MONITOR_ON/OFF', value > 0).asSet}});\n                f({rig: {payload: RigSetting.of(this.setting, value).asSet}});\n            }\n            else {\n                throw new Error(this.ui + ': unknown event: ' + event);\n            }\n        },\n    },\n    {\n        setting: 'MONITOR_ON/OFF',\n        ui: 'monitor_on',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'MOX_SET',\n        ui: 'mox_set',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'NARROW',\n        ui: 'narrow',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'NOISE_BLANKER_LEVEL',\n        ui: 'noise_blanker_level',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'NOISE_BLANKER_STATUS',\n        ui: 'noise_blanker_status',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'NOISE_REDUCTION',\n        ui: 'noise_reduction',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'NOISE_REDUCTION_LEVEL',\n        ui: 'noise_reduction_level',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'OFFSET_(REPEATER_SHIFT)',\n        ui: 'offset',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        ui: 'op_mode',\n        handler: function(event, value, f) {\n            const OpModes = flow.get('OpModes'),\n                  UiCache = flow.get('UiCache'),\n                  MemoryChannels = flow.get('MemoryChannels');\n\n            switch(event) {\n            case 'update':\n                const op_mode = OpModes.updateOpMode(value);\n\n                f({ui: {name: 'op_mode', value: op_mode}});\n                break;\n\n            case 'save':\n                const result = OpModes.saveOpMode();\n                if(result) {\n                    f({ui: {name: 'alert', value: result}});\n                }\n                else {\n                    OpModes.initUi( msg => f({ui: msg}) );\n                }\n                break;\n\n            case 'load':\n                OpModes.loadOpMode(value, rc => {\n                    f({rig: rc});\n                });\n\n                OpModes.initUi( msg => f({ui: msg}) );\n                UiCache.forEach( msg => f({ui: msg}) );\n                MemoryChannels.initUi( msg => f({ui: msg}) );\n                break;\n\n            case 'load_primary':\n                OpModes.loadPrimary(rc => {\n                    f({rig: rc});\n                });\n\n                OpModes.initUi( msg => f({ui: msg}) );\n                UiCache.forEach( msg => f({ui: msg}) );\n                MemoryChannels.initUi( msg => f({ui: msg}) );\n                break;\n\n            case 'remove':\n                OpModes.remove(value);\n                OpModes.initUi( msg => f({ui: msg}) );\n                break;\n\n            case 'toggle_manual_mode':\n                OpModes.toggleManualMode();\n                OpModes.initUi( msg => f({ui: msg}) );\n                break;\n                \n            case 'get_json':\n                f({ui: {name: 'export_json', value: OpModes.getJson()}});\n                break;\n\n            case 'save_json':\n            try {\n                    const json = JSON.parse(value);\n\n                    const result = OpModes.saveJson(json)\n\n                    if(!result) {\n                        OpModes.initUi( msg => f({ui: msg}) );\n                    }\n\n                    f({ui: {name: 'json_validation', value: result}});\n                }\n                catch (error) {\n                    f({ui: {name: 'json_validation', value: error.message}});\n                }\n                break\n\n            default:\n                node.warn('Unknown op_mode event: ' + event);\n                break;\n            }\n        },\n    },\n    {\n        setting: 'OPPOSITE_BAND_INFORMATION',\n        ui: 'opposite_band_information',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'PARAMETRIC_MICROPHONE_EQUALIZER',\n        ui: 'parametric_microphone_equalizer',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'PLAY_BACK',\n    },\n    {\n        setting: 'PLL_UNLOCK_STATUS',\n        ui: 'pll_unlock_status',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'POWER_CONTROL',\n        ui: 'power_level',\n        emit: defaultEmit,\n        handler(event, value, f) {\n            if(event === 'set') {\n                const power_level = parseInt(value, 10);\n\n                if(power_level < 5) {\n                    f({rig: {payload: RigSetting.of(this.setting, 5).asSet}});\n                }\n                if(power_level > 100) {\n                    f({rig: {payload: RigSetting.of(this.setting, 100).asSet}});\n                }\n                else {\n                    f({rig: {payload: RigSetting.of(this.setting, power_level).asSet}});\n                }\n            }\n            else {\n                throw new Error(this.ui + ': unknown event: ' + event);\n            }\n        },\n    },\n    {\n        setting: 'POWER_SWITCH',\n    },\n    {\n        setting: 'PRE-AMP_(IPO)',\n        ui: 'pre_amp',\n        emit: defaultEmit,\n        handler(event, value, f) {\n            if(event === 'click') {\n                const pre_amp = RigState.getRigSetting(this.setting);\n\n                switch(pre_amp.value) {\n                case 'IPO':  f({rig: {payload: RigSetting.of(this.setting, 'AMP1').asSet}}); break;\n                case 'AMP1': f({rig: {payload: RigSetting.of(this.setting, 'AMP2').asSet}}); break;\n                case 'AMP2': f({rig: {payload: RigSetting.of(this.setting, 'IPO').asSet}}); break;\n                }\n            }\n            else if(event === 'set', f) {\n                f({rig: {payload: RigSetting.of(this.setting, value).asSet}});\n            }\n            else {\n                throw new Error(this.ui + ': unknown event: ' + event);\n            }\n        },\n    },\n    {\n        setting: 'QMB_RECALL',\n    },\n    {\n        setting: 'QMB_STORE',\n    },\n    {\n        setting: 'QUICK_SPLIT',\n    },\n    {\n        setting: 'RADIO_INFORMATION-HI-SWR',\n        ui: 'hi_swr',\n        emit: defaultEmit,\n    },\n    {\n        setting: 'RADIO_INFORMATION-PLAY',\n        ui: 'play',\n        emit: defaultEmit,\n    },\n    {\n        setting: 'RADIO_INFORMATION-REC',\n        ui: 'rec',\n        emit: defaultEmit,\n    },\n    {\n        ui: 'rig_status',\n        handler(event, value, f) {\n            if(event === 'enable_transmit') {\n                global.set('diable_tx', false);\n                f({ui: {name: 'high_swr', value: false}});\n            }\n            else {\n                throw new Error(this.ui + ': unknown event: ' + event);\n            }\n        },\n    },\n    {\n        setting: 'RADIO_INFORMATION-TX_LED',\n        ui: 'tx_led',\n        emit: defaultEmit,\n    },\n    {\n        setting: 'RADIO_INFORMATION-VFO-A_RX',\n        ui: 'vfo_a_rx',\n        emit: defaultEmit,\n    },\n    {\n        setting: 'RADIO_INFORMATION-VFO-A_TX',\n        ui: 'vfo_a_tx',\n        emit: defaultEmit,\n    },\n    {\n        setting: 'RADIO_INFORMATION-VFO-B_TX',\n        ui: 'vfo_b_tx',\n        emit: defaultEmit,\n    },\n    {\n        setting: 'RADIO_STATUS',\n        ui: 'radio_status',\n        emit: defaultEmit,\n    },\n    {\n        setting: 'READ_METER-ALC',\n        ui: 'alc_meter',\n        emit(name, rs, f) {\n            const msg = {name: name, value: rs.value};\n\n            f({ui: msg, local: msg});\n        },\n    },\n    {\n        setting: 'READ_METER-COMP',\n        ui: 'comp_meter',\n        emit: defaultEmit,\n    },\n    {\n        setting: 'READ_METER-FRONT_PANEL',\n    },\n    {\n        setting: 'READ_METER-ID',\n        ui: 'id_meter',\n        emit: defaultEmit,\n    },\n    {\n        setting: 'READ_METER-OTHER_METER',\n    },\n    {\n        setting: 'READ_METER-PO',\n        ui: 'po_meter',\n        emit: defaultEmit,\n    },\n    {\n        setting: 'READ_METER-SWR',\n        ui: 'swr_meter',\n        emit: defaultEmit,\n    },\n    {\n        setting: 'READ_METER-S_METER',\n        ui: 's_meter',\n        emit: defaultEmit,\n    },\n    {\n        setting: 'READ_METER-VDD',\n        ui: 'vdd_meter',\n        emit: defaultEmit,\n    },\n    {\n        setting: 'RF_ATTENUATOR',\n        ui: 'rf_attenuator',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'RF_GAIN',\n        ui: 'rf_gain',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'RX_CLARIFIER_PLUS_OFFSET',\n    },\n    {\n        setting: 'S-METER_READING',\n    },\n    {\n        setting: 'SCAN',\n    },\n    {\n        ui: 'settings',\n        handler(event, value, f) {\n            const OpModes = flow.get('OpModes'),\n                  com = OpModes.currentOpMode(),\n                  UiCache = flow.get('UiCache');\n\n            if(!com.settings.hasOwnProperty(value)) {\n                com.settings[value] = {};\n            }\n            _toggle(event, com.settings[value], UiCache.get(value), f);\n        },\n    },\n    {\n        setting: 'SPEECH_PROCESSOR_LEVEL',\n        ui: 'speech_processor_level',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'SPEECH_PROCESSOR_ON/OFF',\n        ui: 'speech_processor_on',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'SQUELCLH_LEVEL',\n        ui: 'squelclh_level',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'SWAP_VFO',\n        ui: 'swap_vfo',\n        handler: simpleCommandHandler,\n    },\n    {\n        setting: 'TIME',\n        ui: 'time',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'TIME_DIFFERENTIAL',\n        ui: 'time_differential',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'TXW',\n        ui: 'txw',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'TX_CLAR',\n        ui: 'tx_clar',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'TX_SET',\n        ui: 'transmit',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'UP',\n    },\n    {\n        setting: 'V/M_KEY_FUNCTION',\n    },\n    {\n        setting: 'VFO-A_TO_MEMORY_CHANNEL',\n    },\n    {\n        setting: 'VFO-A_TO_VFO-B',\n        ui: 'vfo_a_to_b',\n        handler: simpleCommandHandler,\n    },\n    {\n        setting: 'VFO-B_TO_VFO-A',\n        ui: 'vfo_b_to_a',\n        handler: simpleCommandHandler,\n    },\n    {\n        setting: 'VOX_DELAY_TIME_/_DATA_VOX_DELAY_TIME',\n    },\n    {\n        setting: 'VOX_GAIN',\n        ui: 'vox_gain',\n        emit: defaultEmit,\n        handler: defaultHandler,\n    },\n    {\n        setting: 'VOX_STATUS',\n        ui: 'vox_status',\n        emit: defaultEmit,\n        handler: toggleHandler,\n    },\n    {\n        setting: 'WIDTH',\n    },\n    {\n        setting: 'ZERO_IN',\n    },\n];\n\nconst rig_events = {};\n\nui_config.forEach( e => {\n    if(e.hasOwnProperty('emit')) {\n        if(!e.hasOwnProperty('setting')) {\n            throw new Error('ui_config has emit, but no setting: ' + JSON.stringify(e));\n        }\n\n        if(rig_events.hasOwnProperty(e.setting)) {\n            throw new Error('Duplicate setting in ui_config: ' + e.setting);\n        }\n\n        rig_events[e.setting] = {ui: e.ui, emit: e.emit};\n    }\n});\n\nflow.set('rig_events', rig_events);\n\nconst ui_events = {};\n\nui_config.forEach( e => {\n    if(e.hasOwnProperty('ui')) {\n        if(ui_events.hasOwnProperty(e.ui)) {\n            throw new Error('ui_events has dup ui - ' + ui_events[e.ui].setting + ' and ' + key);\n        }\n\n        if(e.hasOwnProperty('handler')) {\n            ui_events[e.ui] = {setting: e.setting, handler: e.handler};\n        }\n    }\n});\n\nflow.set('ui_events', ui_events);",
        "finalize": "",
        "x": 160,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8c489ecb.12776",
        "type": "function",
        "z": "754980e0.50707",
        "name": "Handle UI App Events",
        "func": "'use strict';\n\nconst ui_events = flow.get('ui_events'),\n      ue = ui_events[msg.topic];\n\nif(ue) {\n    if(ue.hasOwnProperty('handler')) {\n        ue.handler.call(ue, msg.event, msg.value, m => node.send([m.rig, m.ui]));\n    }\n    else {\n        node.warn('Received UI event without handler: ' + JSON.stringify(ue));\n    }\n}\nelse {\n    node.warn('Received unknown UI event: ' + msg.topic);\n}\n\nnode.done();",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 460,
        "wires": [
            [
                "c3a315cd.7c89f8",
                "1f5acbad.bac4b4"
            ],
            [
                "d810054e.2c8a18",
                "f2314251.d743f"
            ]
        ],
        "outputLabels": [
            "Rig",
            "UI"
        ]
    },
    {
        "id": "f3e67fca.84df8",
        "type": "link in",
        "z": "754980e0.50707",
        "name": "TO_UI",
        "links": [
            "8b7f347c.c6c2b8",
            "f40e9ca9.9f7fa",
            "198028cd.446c17",
            "217430e2.5e2e4",
            "56d03bba.877eb4",
            "cc701e51.f94cc"
        ],
        "x": 56.0000114440918,
        "y": 523.0000476837158,
        "wires": [
            [
                "9ff9d242.152b8"
            ]
        ]
    },
    {
        "id": "198028cd.446c17",
        "type": "link out",
        "z": "754980e0.50707",
        "name": "UI",
        "links": [
            "f3e67fca.84df8"
        ],
        "x": 295,
        "y": 880,
        "wires": []
    },
    {
        "id": "87af3edc.0a8a9",
        "type": "link in",
        "z": "754980e0.50707",
        "name": "FROM_RIG",
        "links": [
            "45ec207.8d001e",
            "97ef5679.0df558",
            "f52d625e.4d618",
            "80bd8c8a.4d949",
            "99f79569.76e9b8",
            "71455195.ed181",
            "98fc3ded.a6f82"
        ],
        "x": 55,
        "y": 320,
        "wires": [
            [
                "bd9bc5eb.dbcfa8",
                "c2f548b2.8d3c18"
            ]
        ]
    },
    {
        "id": "b5b6dc57.7d54",
        "type": "link in",
        "z": "754980e0.50707",
        "name": "READ_METERS",
        "links": [
            "48e6d2f6.b56bdc"
        ],
        "x": 55,
        "y": 700,
        "wires": [
            [
                "d1750eb2.50213",
                "b60171a3.8c75a"
            ]
        ]
    },
    {
        "id": "48e6d2f6.b56bdc",
        "type": "link out",
        "z": "754980e0.50707",
        "name": "",
        "links": [
            "d0cf805b.6f11",
            "b5b6dc57.7d54",
            "cb8fed0.368941"
        ],
        "x": 335,
        "y": 320,
        "wires": []
    },
    {
        "id": "d0cf805b.6f11",
        "type": "link in",
        "z": "754980e0.50707",
        "name": "ALC_STATUS",
        "links": [
            "48e6d2f6.b56bdc"
        ],
        "x": 55,
        "y": 880,
        "wires": [
            [
                "1fc7fc32.d76254"
            ]
        ]
    },
    {
        "id": "9898d401.cafc38",
        "type": "link out",
        "z": "754980e0.50707",
        "name": "",
        "links": [
            "9725b52b.0bb248"
        ],
        "x": 575,
        "y": 700,
        "wires": []
    },
    {
        "id": "bd9bc5eb.dbcfa8",
        "type": "debug",
        "z": "754980e0.50707",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 170,
        "y": 380,
        "wires": []
    },
    {
        "id": "c3a315cd.7c89f8",
        "type": "link out",
        "z": "754980e0.50707",
        "name": "",
        "links": [
            "9725b52b.0bb248"
        ],
        "x": 795,
        "y": 440,
        "wires": []
    },
    {
        "id": "758c6c17.f379c4",
        "type": "function",
        "z": "754980e0.50707",
        "name": "Add fav + saved",
        "func": "'use strict';\n\nconst OpModes = flow.get('OpModes'),\n      _ = global.get('_'),\n      passThrough = ['op_mode', 'op_modes', 'memory_channels', 'export_json'];\n\nif(passThrough.find( p => p === msg.name )) {\n    return msg;\n}\n\nif(!OpModes.isReady()) {\n    return null;\n}\n\nconst com = OpModes.currentOpMode();\n\nmsg.saved = false;\nmsg.fav = false;\n        \nif(msg.name === 'menu_item') {\n    if(com.menus.hasOwnProperty(msg.no)) {\n        msg.saved = com.menus[msg.no].saved || false;\n        msg.fav = com.menus[msg.no].fav || false;\n        msg.changed = !_.isEqual(msg.value, com.menus[msg.no].onLoad);\n    }\n}\nelse if(com.settings.hasOwnProperty(msg.name)) {\n    msg.saved = com.settings[msg.name].saved || false;\n    msg.fav = com.settings[msg.name].fav || false;\n    msg.changed = !_.isEqual(msg.value, com.settings[msg.name].onLoad);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 461.0000114440918,
        "y": 283.0000476837158,
        "wires": [
            [
                "f40e9ca9.9f7fa"
            ]
        ]
    },
    {
        "id": "ce664ef0.c471f",
        "type": "link in",
        "z": "754980e0.50707",
        "name": "REFRESH_UI",
        "links": [
            "d810054e.2c8a18"
        ],
        "x": 336.0000114440918,
        "y": 263.0000476837158,
        "wires": [
            [
                "758c6c17.f379c4",
                "13b5be03.3a5d52"
            ]
        ]
    },
    {
        "id": "71455195.ed181",
        "type": "link out",
        "z": "754980e0.50707",
        "name": "",
        "links": [
            "87af3edc.0a8a9"
        ],
        "x": 795,
        "y": 580,
        "wires": []
    },
    {
        "id": "9ff9d242.152b8",
        "type": "function",
        "z": "754980e0.50707",
        "name": "Package in paylaod",
        "func": "return {payload: msg};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 191.0000114440918,
        "y": 523.0000476837158,
        "wires": [
            [
                "49b93a5c.6f0374",
                "3f3ed9a3.c51b36"
            ]
        ]
    },
    {
        "id": "3f3ed9a3.c51b36",
        "type": "debug",
        "z": "754980e0.50707",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 371.0000114440918,
        "y": 463.0000476837158,
        "wires": []
    },
    {
        "id": "f40e9ca9.9f7fa",
        "type": "link out",
        "z": "754980e0.50707",
        "name": "",
        "links": [
            "f3e67fca.84df8"
        ],
        "x": 616.0000114440918,
        "y": 283.0000476837158,
        "wires": []
    },
    {
        "id": "b27a72f2.e22a4",
        "type": "debug",
        "z": "754980e0.50707",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 540,
        "wires": []
    },
    {
        "id": "cd680516.6c28a8",
        "type": "comment",
        "z": "754980e0.50707",
        "name": "Handle events from rig to UI",
        "info": "",
        "x": 140,
        "y": 240,
        "wires": []
    },
    {
        "id": "d810054e.2c8a18",
        "type": "link out",
        "z": "754980e0.50707",
        "name": "",
        "links": [
            "ce664ef0.c471f"
        ],
        "x": 795,
        "y": 480,
        "wires": []
    },
    {
        "id": "ca82bbc0.2ae018",
        "type": "function",
        "z": "754980e0.50707",
        "name": "UiCache",
        "func": "\n// UiCache is under the Setup tab\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "'use strict';\n\nconst ui_cache = {},\n      _ = global.get('_');\n\nconst uiCache = {\n    set(name, value) {\n        if(typeof(value) === 'object') {\n            ui_cache[name] = _.cloneDeep(value);\n        }\n        else {\n            ui_cache[name] = value;\n        }\n    },\n    get(name) {\n        if(typeof(ui_cache[name]) === 'object') {\n            return _.cloneDeep(ui_cache[name]);\n        }\n        else {\n            return ui_cache[name];\n        }\n    },\n    forEach(f) {\n        for (const [k, v] of Object.entries(ui_cache)) {\n            f(v);\n        }\n    },\n};\n\nflow.set('UiCache', uiCache);",
        "finalize": "",
        "x": 360,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "13b5be03.3a5d52",
        "type": "debug",
        "z": "754980e0.50707",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 220,
        "wires": []
    },
    {
        "id": "86f5eebf.fe194",
        "type": "function",
        "z": "754980e0.50707",
        "name": "OpModes",
        "func": "\n// OpModes is under the Setup tab\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "'use strict';\n\nconst PERSIST = 'persist',\n      OP_MODES = 'op_modes',\n      NEW_OP_MODE = 'New Op Mode',\n      NEW_OP_MODE_PROP = 'new_op_mode',\n      CHANGED_PROP = 'changes',\n      _ = global.get('_');\n      \nlet com = null,\n    manual_mode = false,\n    trigger_cache = null,\n    last_load = 0,\n    op_modes = global.get(OP_MODES, PERSIST) || {};\n\nconst isReady = function() {\n    if(com) {\n        return true;\n    }\n    return false;\n}\n\nconst currentOpMode = function() {\n    if(com) {\n        return com;\n    }\n\n    throw new Error('Current Op Mode not set?');\n}\n\nconst lastOpMode = function(op_mode) {\n    if(op_mode) {\n        global.set('last_op_mode', op_mode, PERSIST);\n    }\n    \n    return global.get('last_op_mode', PERSIST);\n}\n\nconst loadPrimary = function(f) {\n    const primary = Object.values(op_modes).find( om => om.primary );\n\n    if(primary) {\n        return loadOpMode(primary.name, f);\n    }\n}\nconst loadLastOpMode = function(f) {\n    const lom = lastOpMode();\n\n    if(lom) {\n        if(op_modes.hasOwnProperty(lom)) {\n            loadOpMode(lom, f);\n        }\n    }\n    else {\n        loadOpMode(NEW_OP_MODE);\n    }\n};\n\nconst _newOpMode = function(name, prop) {\n    const om = {name: name, primary: false, enabled: true, order: 0, trigger: '', settings: {}, menus: {}};\n\n    om[prop] = true;\n\n    return om;\n}\nfunction _loadOpMode(name) {\n    if(name === NEW_OP_MODE) {\n        return _newOpMode('New Op Mode', NEW_OP_MODE_PROP);\n    }\n\n    if(op_modes.hasOwnProperty(name)) {\n        return op_modes[name];\n    }\n    \n    throw new Error('loadOpMode: Op Mode \"' + name + '\" not found.');\n}\nconst _sendSetting = function(name, rc, f) {\n    const ui_events = flow.get('ui_events'),\n          ue = ui_events[name];\n\n    if(ue) {\n        if(ue.hasOwnProperty('handler')) {\n            ue.handler.call(ue, 'set', rc.value, m => {\n                if(m.hasOwnProperty('rig')) {\n                    f(m.rig);\n                }\n                if(m.hasOwnProperty('ui')) {\n                    node.warn('Received unexpected ui event: ' + JSON.stringify(m.ui));\n                }\n            });\n        }\n        else {\n            node.warn('Received UI event without handler: ' + JSON.stringify(ue));\n        }\n    }\n    else {\n        node.warn('Received unknown UI event: ' + name);\n    }\n    \n    return null;\n}\nconst loadOpMode = function(name, f) {\n    const op_mode = _loadOpMode(name),\n          UiCache = flow.get('UiCache');\n    \n    last_load = Date.now();\n    node.log('Loading Op Mode: ' + name);\n\n    com = _.cloneDeep(op_mode);\n    lastOpMode(com.name);\n\n    // Make a copy of current values of rig on load\n\n    let fix_freq = false;\n    UiCache.forEach( uc => {\n        if(uc.name === 'menu_item') {\n            if(!com.menus.hasOwnProperty(uc.no)) {\n                com.menus[uc.no] = {};\n            }\n            if(com.menus[uc.no].saved) {\n                com.menus[uc.no].onLoad = com.menus[uc.no].value;\n\n                if(f && !_.isEqual(com.menus[uc.no].value, uc.value)) {\n                   _sendSetting('menu_item', {value: {no: uc.no, value: com.menus[uc.no].value}}, f);\n                }\n            }\n            else {\n                com.menus[uc.no].onLoad = uc.value;\n            }\n        }\n        else {\n            if(!com.settings.hasOwnProperty(uc.name)) {\n                com.settings[uc.name] = {};\n            }\n            if(com.settings[uc.name].saved) {\n                com.settings[uc.name].onLoad = com.settings[uc.name].value;\n                if(f && !_.isEqual(com.settings[uc.name].value, uc.value)) {\n                    _sendSetting(uc.name, com.settings[uc.name], f);\n\n                    if(uc.name === 'mode') {\n                        fix_freq = true;\n                    }\n                }\n            }\n            else {\n                com.settings[uc.name].onLoad = uc.value;\n            }\n        }\n    });\n\n    // FIXME:  mode change can change the VFO freq.\n    // e.g. switching from DATA-USB to LSB will shift the VFO 700 Hz\n    \n    if(f && fix_freq) {\n        const uc = UiCache.get('vfo_a');\n\n        _sendSetting(uc.name, uc, f);\n    }\n}\n\nconst updateOpMode = function(value) {\n    const props = ['name', 'primary', 'enabled', 'order', 'trigger'];\n    \n    for(const prop of props) {\n        if(value.hasOwnProperty(prop)) {\n            if(com[prop] !== value[prop]) {\n                com[prop] = value[prop];\n    \n                com[CHANGED_PROP] = true;\n            }\n        }\n    }\n\n    delete com[NEW_OP_MODE_PROP];\n    return com;\n}\n\nconst saveOpMode = function() {\n    const som = {},\n          UiCache = flow.get('UiCache');\n    \n    if(com[NEW_OP_MODE_PROP]) {\n        return 'Please change Op Mode name before saving.';\n    }\n\n    som.name = com.name;\n    som.primary = com.primary;\n    som.enabled = com.enabled;\n    som.order = com.order;\n    som.trigger =com.trigger;\n\n    som.settings = {};\n    for (const [k, v] of Object.entries(com.settings)) {\n        if(v.saved) {\n            if(!som.settings[k]) {\n                som.settings[k] = {};\n            }\n            som.settings[k].saved = true;\n            som.settings[k].value = UiCache.get(k).value;\n        }\n        if(v.fav) {\n            if(!som.settings[k]) {\n                som.settings[k] = {};\n            }\n            som.settings[k].fav = true;\n        }\n    }\n\n    som.menus = {};\n    for (const [k, v] of Object.entries(com.menus)) {\n        if(v.saved) {\n            if(!som.menus[k]) {\n                som.menus[k] = {};\n            }\n            som.menus[k].saved = true;\n            som.menus[k].value = UiCache.get(k).value;\n        }\n        if(v.fav) {\n            if(!som.menus[k]) {\n                som.menus[k] = {};\n            }\n            som.menus[k].fav = true;\n        }\n    }\n\n    if(som.primary) {\n        Object.values(op_modes).forEach( om => om.primary = false );\n    }\n\n    op_modes[som.name] = som;\n    global.set(OP_MODES, op_modes, PERSIST);\n    trigger_cache = null;\n    \n    return null;\n};\n\nconst initUi = function(f) {\n    if(com) {\n        f({name: 'op_mode', value: {name: com.name, primary: com.primary, enabled: com.enabled, order: com.order, trigger: com.trigger}});\n\n        const names = Object.keys(op_modes).sort().map( name => { return {name: name, can_delete: true} });\n        names.push({name: NEW_OP_MODE, can_delete: false});\n        \n        f({name: 'op_modes', value: names});\n        f({name: 'manual_mode', value: manual_mode});\n    }\n}\n\nconst forEach = function(f) {\n    for (const [k, v] of Object.entries(com.settings)) {\n        f(k, _.cloneDeep(v));\n    }\n    for (const [k, v] of Object.entries(com.menus)) {\n        f('menu_item', _.cloneDeep(v, {value: {no: k, value: v.value}}));\n    }\n}\n\nconst remove = function(name) {\n    delete op_modes[name];\n    trigger_cache = null;\n\n    global.set(OP_MODES, op_modes, PERSIST);\n}\n\nconst checkTriggers = function(trigger_ui) {\n    if(manual_mode || !isReady()) {\n        return null;\n    }\n    \n    // NOTE: This code delays the checking of triggers for a\n    // period of time after the last load.  What happens is\n    // if a mode setting is set, the rig will emit a vfo_a\n    // message.  What's happening is the Op Mode gets changed\n    // and then the vfo_a message will trigger another Op Mode\n    // change.  Now what we want.\n\n    if(Date.now() - last_load < 2000) {\n        return null;\n    }\n\n    if(!trigger_cache) {\n        trigger_cache = [];\n\n        _.sortBy(op_modes, [ om => om.order ]).forEach( om => {\n            if(om.trigger && om.enabled) {\n                trigger_cache.push({\n                    name: om.name,\n                    primary: om.primary,\n                    order: om.order,\n                    trigger: new Function(om.trigger),\n                });\n            }\n        });\n    }\n\n    const UiCache = flow.get('UiCache');\n\n    for(const tc of trigger_cache) {\n        const context = {\n            UiCache: UiCache,\n            node: node,\n            trigger: trigger_ui,\n        };\n\n        if(tc.trigger.call(context)) {\n            if(tc.name !== com.name) {\n                return tc.name;\n            }\n            else {\n                return null;\n            }\n        }\n    }\n    \n    return null;\n}\n\nconst toggleManualMode = function(value) {\n    manual_mode = !manual_mode;\n}\n\nfunction getJson() {\n    return JSON.stringify(op_modes);\n}\n\nfunction saveJson(json) {\n    const Ajv = global.get('Ajv');\n    \n    const ajv = new Ajv()\n    \n    const schema = {\n        \"type\": \"object\",\n        \"patternProperties\": {\n            \"^.*$\": {\n                \"type\": \"object\",\n                \"required\": [\"name\"],\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\"\n                    },\n                    \"primary\": {\n                        \"type\": \"boolean\"\n                    },\n                    \"enabled\": {\n                        \"type\": \"boolean\"\n                    },\n                    \"order\": {\n                        \"type\": \"string\"\n                    },\n                    \"trigger\": {\n                        \"type\": \"string\"\n                    },\n                    \"settings\": {\n                        \"type\": \"object\",\n                        \"patternProperties\": {\n                            \"^.*$\": {\n                                \"type\": \"object\",\n                                \"required\": [],\n                                \"properties\": {\n                                    \"saved\": {\n                                        \"type\": \"boolean\"\n                                    },\n                                    \"value\": {\n                                        \"type\": [\"boolean\", \"number\", \"null\", \"string\"]\n                                    },\n                                    \"fav\": {\n                                        \"type\": \"boolean\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"menus\": {\n                        \"type\": \"object\",\n                        \"patternProperties\": {\n                            \"^[0-9]+$\": {\n                                \"type\": \"object\",\n                                \"required\": [],\n                                \"properties\": {\n                                    \"saved\": {\n                                        \"type\": \"boolean\"\n                                    },\n                                    \"value\": {\n                                        \"type\": [\"boolean\", \"number\", \"null\", \"string\"]\n                                    },\n                                    \"fav\": {\n                                        \"type\": \"boolean\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    \n    const validate = ajv.compile(schema)\n\n    if(!validate(json)) {\nnode.log('validate.errors: ' + JSON.stringify(validate.errors));\n        return validate.errors[0].dataPath + ' ' +validate.errors[0].message;\n    }\n    \n    op_modes = json;\nnode.log(406);\n    global.set(OP_MODES, op_modes, PERSIST);\nnode.log('global.set ok');\n\n    return null;\n}\n\nconst OpModes = {\n    checkTriggers: checkTriggers,\n    currentOpMode: currentOpMode,\n    forEach: forEach,\n    getJson: getJson,\n    initUi: initUi,\n    isReady: isReady,\n    loadLastOpMode: loadLastOpMode,\n    loadOpMode: loadOpMode,\n    loadPrimary: loadPrimary,\n    remove: remove,\n    saveJson: saveJson,\n    saveOpMode: saveOpMode,\n    toggleManualMode: toggleManualMode,\n    updateOpMode: updateOpMode,\n}\nflow.set('OpModes', OpModes);",
        "finalize": "",
        "x": 360,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e57b66e0.917e48",
        "type": "link out",
        "z": "754980e0.50707",
        "name": "",
        "links": [
            "9725b52b.0bb248"
        ],
        "x": 335,
        "y": 360,
        "wires": []
    },
    {
        "id": "43fbc641.a703f8",
        "type": "function",
        "z": "754980e0.50707",
        "name": "Monitor SWR",
        "func": "'use strict';\n\n// Disable checking for high SWR while tuning.\n\nif(flow.get('atu_tuning')) {\n    if(msg.name === 'transmit' && !msg.value) {\n        flow.set('atu_tuning', false);\n    }\n\n    return null;\n}\n\nconst MAX_SWR = 50;\n\nif(msg.name === 'swr_meter' && msg.value > MAX_SWR && !global.get('diable_tx')) {\n    const ui_events = flow.get('ui_events'),\n          ue = ui_events['transmit'];\n\n    global.set('diable_tx', true);\n\n    ue.handler('set', false, m => node.send([m.rig, m.ui]));\n\n    node.send([null, {name: 'high_swr', value: true}]);\n}\n\nnode.done();",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 1100,
        "wires": [
            [
                "c58f5e0a.ca2e8"
            ],
            [
                "cc701e51.f94cc"
            ]
        ],
        "outputLabels": [
            "Rig",
            "UI"
        ]
    },
    {
        "id": "a7697404.2ba668",
        "type": "comment",
        "z": "754980e0.50707",
        "name": "Shutdown on high SWR",
        "info": "",
        "x": 120,
        "y": 960,
        "wires": []
    },
    {
        "id": "cc701e51.f94cc",
        "type": "link out",
        "z": "754980e0.50707",
        "name": "UI",
        "links": [
            "f3e67fca.84df8"
        ],
        "x": 735,
        "y": 1120,
        "wires": []
    },
    {
        "id": "cb8fed0.368941",
        "type": "link in",
        "z": "754980e0.50707",
        "name": "ALC_STATUS",
        "links": [
            "48e6d2f6.b56bdc"
        ],
        "x": 55,
        "y": 1060,
        "wires": [
            [
                "43fbc641.a703f8"
            ]
        ]
    },
    {
        "id": "c58f5e0a.ca2e8",
        "type": "link out",
        "z": "754980e0.50707",
        "name": "",
        "links": [
            "9725b52b.0bb248"
        ],
        "x": 735,
        "y": 1080,
        "wires": []
    },
    {
        "id": "1f5acbad.bac4b4",
        "type": "debug",
        "z": "754980e0.50707",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 400,
        "wires": []
    },
    {
        "id": "f2314251.d743f",
        "type": "debug",
        "z": "754980e0.50707",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 520,
        "wires": []
    },
    {
        "id": "52c7bf80.05b85",
        "type": "function",
        "z": "754980e0.50707",
        "name": "ATU Tuning and transmit on",
        "func": "'use strict';\n\nflow.set('atu_tuning', true);\n\nreturn {name: 'transmit', value: true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 220,
        "y": 1120,
        "wires": [
            [
                "43fbc641.a703f8"
            ]
        ]
    },
    {
        "id": "91a83063.2b921",
        "type": "inject",
        "z": "754980e0.50707",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 55,
        "y": 1120,
        "wires": [
            [
                "52c7bf80.05b85"
            ]
        ],
        "l": false
    },
    {
        "id": "11b6292d.3f4137",
        "type": "function",
        "z": "754980e0.50707",
        "name": "ATU tuning and transmit off",
        "func": "'use strict';\n\nflow.set('atu_tuning', true);\n\nreturn {name: 'transmit', value: false};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 220,
        "y": 1160,
        "wires": [
            [
                "43fbc641.a703f8"
            ]
        ]
    },
    {
        "id": "84dabc76.961ff",
        "type": "inject",
        "z": "754980e0.50707",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 55,
        "y": 1160,
        "wires": [
            [
                "11b6292d.3f4137"
            ]
        ],
        "l": false
    },
    {
        "id": "62e1fdef.b76244",
        "type": "function",
        "z": "754980e0.50707",
        "name": "Simulate high SWR",
        "func": "'use strict';\n\nconst MAX_SWR = 50;\n\nreturn {name: 'swr_meter', value: MAX_SWR + 10};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 190,
        "y": 1200,
        "wires": [
            [
                "43fbc641.a703f8"
            ]
        ]
    },
    {
        "id": "4d8cf558.22029c",
        "type": "inject",
        "z": "754980e0.50707",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 55,
        "y": 1200,
        "wires": [
            [
                "62e1fdef.b76244"
            ]
        ],
        "l": false
    },
    {
        "id": "ea804a4b.cff7d8",
        "type": "function",
        "z": "754980e0.50707",
        "name": "MemoryChannels",
        "func": "\n// MemoryChannels is under the Setup tab\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "'use strict';\n\nconst PERSIST = 'persist',\n      MEMORY_CHANNELS = 'memory_channels',\n      _ = global.get('_');\n\nlet memory_channels = global.get(MEMORY_CHANNELS, PERSIST) || [];\n\nfunction setSetting(name, value, f) {\n    const ui_events = flow.get('ui_events'),\n          ue = ui_events[name],\n          RigSetting = global.get('RigSetting'),\n          RigState = global.get('RigState');\n\n    if(ue) {\n        const rs = RigState.getRigSetting(ue.setting);\n\n        if(rs.value !== value) {\n            const payload = RigSetting.of(ue.setting, value).asSet;\n\n            f({rig: {payload: RigSetting.of(ue.setting, value).asSet}});\n        }\n    }\n    else {\n        throw new Error('UI Event has no handler: ' + name);\n    }\n}\n\nconst MemoryChannels = {\n    newChannel: function() {\n        return {\n            name: 'New Memory Channel',\n            frequency: 7000000,\n            offset: 'Simplex',\n            mode: 'USB', \n            squelchMode: 'CTCSS OFF',\n            squelchTone: null,\n            isNew: true,\n        };\n    },\n    init() {\n        memory_channels = [];\n        \n        MemoryChannels.save();\n    },\n    update(mc) {\n        if(mc.hasOwnProperty('no')) {\n            memory_channels[mc.no] = Object.assign({}, mc);\n        }\n        else {\n            memory_channels.push(Object.assign({}, mc, {no: memory_channels.length}));\n        }\n        \n        MemoryChannels.save();\n    },\n    remove(no) {\n        const mc = memory_channels[no];\n        \n        if(mc) {\n            memory_channels[no] = null;\n        \n            MemoryChannels.save();\n        }\n    },\n    get(no) {\n        const mc = memory_channels[name];\n        \n        if(mc) {\n            return Object.assign({}, mc);\n        }\n    },\n    load(no, f) {\n        const mc = memory_channels[no];\n\n        if(mc) {\n            setSetting('mode', mc.mode, f);\n            setSetting('vfo_a', mc.frequency, f);\n            setSetting('offset', mc.offset, f);\n            setSetting('ctcss', mc.squelchMode, f);\n            \n            switch(mc.squelchMode) {\n            case 'CTCSS OFF':\n                break;\n            case 'CTCSS ENC/DEC':\n            case 'CTCSS ENC':\n                setSetting('ctcss_tone_frequency', mc.squelchTone, f);\n                break;\n            case 'DCS ENC/DEC':\n            case'DCS ENC':\n                setSetting('dcs_tone_frequency', mc.squelchTone, f);\n                break;\n            }\n        }\n    },\n    save() {  \n        global.set(MEMORY_CHANNELS, memory_channels,  PERSIST);\n    },\n    initUi(f) {\n        f({name: 'memory_channels',\n            value: _.sortBy(memory_channels.filter( mc => mc != null), [ mc => mc.name ])\n        });\n    },\n    getJson(f) {\n        const mcs = memory_channels.filter( mc => mc != null );\n\n        f({ui: {name: 'export_json', value: JSON.stringify(mcs)}});\n    },\n    saveJson(json) {\n        const Ajv = global.get('Ajv');\n        \n        const ajv = new Ajv()\n        \n        const schema = {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"required\": [\"no\", \"name\", \"frequency\", \"mode\"],\n                \"properties\": {\n                    \"no\": {\n                        \"type\": \"number\"\n                    },\n                    \"name\": {\n                        \"type\": \"string\"\n                    },\n                    \"frequency\": {\n                        \"type\": \"number\"\n                    },\n                    \"mode\": {\n                        \"type\": \"string\",\n                        \"enum\": ['LSB', 'USB', 'FM', 'DATA-USB', 'DATA-FM', 'RTTY-LSB', 'RTTY-USB', 'CW', 'CW-R', 'DATA-LSB', 'AM', 'AM-N', 'FM-N', 'C4FM']\n                    },\n                    \"offset\": {\n                        \"type\": \"string\",\n                        \"enum\": ['Simplex','+','-']\n                    },\n                    \"squelchMode\": {\n                        \"type\": \"string\",\n                        \"enum\": ['CTCSS OFF', 'CTCSS ENC/DEC', 'CTCSS ENC', 'DCS ENC/DEC', 'DCS ENC']\n                    },\n                    \"squelchTone\": {\n                        \"type\": [\"string\", \"null\"]\n                    }\n                }\n            }\n        };\n        \n        const validate = ajv.compile(schema)\n\n        if (!validate(json)) {\n            console.log(validate.errors);\n            return validate.errors[0].dataPath + ' ' +validate.errors[0].message;\n        }\n\n        memory_channels = json;\n        global.set(MEMORY_CHANNELS, json,  PERSIST);\n\n        return null;\n    },\n};\n\nflow.set('MemoryChannels', MemoryChannels);",
        "finalize": "",
        "x": 150,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "1e82656e.ec1ddb",
        "type": "function",
        "z": "754980e0.50707",
        "name": "MenuItems",
        "func": "\n// MenuItems is under the Setup tab\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "'use strict';\n\nconst RigSetting = global.get('RigSetting'),\n      _ = global.get('_');\n\nfunction isEmptyValue(value) {\n    if (typeof (value) === 'string' && value.length === 0) {\n        return true;\n    }\n\n    if (value === null || value === undefined) {\n        return true\n    }\n\n    return false;\n}\n\nfunction pad(len) {\n    return function (value) {\n        if (isEmptyValue(value)) {\n            return null;\n        }\n\n        let n = typeof (value) === 'string' ? value : value.toString();\n\n        while (n.length < len) {\n            n = '0' + n;\n        }\n\n        return n;\n    };\n}\nconst pad1 = pad(1);\nconst pad2 = pad(2);\nconst pad3 = pad(3);\nconst pad4 = pad(4);\nconst pad9 = pad(9);\n\n// UI Iterface functions\n\nfunction defaultToUi(value) {\n    return value;\n}\nfunction defaultFromUi(value) {\n    return value;\n}\n\nfunction fromUiMaxPower(max) {\n    return function (value) {\n        if (value < 5) {\n            return '005';\n        }\n        if (value >= max) {\n            return pad3(max);\n        }\n        return pad3(value);\n    }\n}\n\nfunction toUiInt(value) {\n    return parseInt(value, 10).toString();\n}\n\nfunction fromUiIntBy20(value) {\n    if (isEmptyValue(value)) {\n        return null;\n    }\n\n    return pad4(value - (v % 20));\n}\n\nfunction toCutFreq(value, offset) {\n    if (value === '00') {\n        return 'OFF';\n    }\n\n    return ((parseInt(value, 10) + offset) * 50).toString();\n}\nfunction fromCutFreq(value, offset) {\n    if (value === 'OFF') {\n        return '00';\n    }\n\n    return pad2(Math.floor((value / 50)) - offset);\n}\nfunction toUiLCutFreq(value) {\n    return toCutFreq(value, 1);\n}\nfunction fromUiLCutFreq(value) {\n    return fromCutFreq(value, 1);\n}\nfunction toUiHCutFreq(value) {\n    return toCutFreq(value, 13);\n}\nfunction fromUiHCutFreq(value) {\n    return fromCutFreq(value, 13);\n}\n\n// Start of maps\n\nconst mic_select_map = {\n    '0': 'MIC',\n    '1': 'REAR',\n};\n\nconst ptt_select_map = {\n    '0': 'DAKY',\n    '1': 'RTS',\n    '2': 'DTR',\n};\n\nconst port_select_map = {\n    '0': 'DATA',\n    '1': 'USB',\n};\n\nconst slope_map = {\n    '0': '6 dB',\n    '1': '18 dB',\n};\n\nconst cw_memory_map = {\n    '0': 'TEXT',\n    '1': 'MESSAGE',\n};\n\nconst baud_rate_map = {\n    '0': '4800',\n    '1': '9600',\n    '2': '19200',\n    '3': '38400',\n};\n\nconst serial_timeout_map = {\n    '0': '10 ms',\n    '1': '100 ms',\n    '2': '1000 ms',\n    '3': '3000 ms',\n};\n\nconst enable_disable_map = {\n    '0': 'DISABLE',\n    '1': 'ENABLE',\n};\n\nconst on_off_map = {\n    '0': 'OFF',\n    '1': 'ON',\n};\n\nconst normal_reverse_map = {\n    '0': 'NORMAL',\n    '1': 'REVERSE',\n};\n\nconst standard_colors_map = {\n    '0': 'BLUE',\n    '1': 'GRAY',\n    '2': 'GREEN',\n    '3': 'ORANGE',\n    '4': 'PURPLE',\n    '5': 'RED',\n    '6': 'SKY BLUE',\n};\n\n\nconst prmtrc_eq1_freq_map = {\n    '00': 'OFF',\n    '01': '100 Hz',\n    '02': '200 Hz',\n    '03': '300 Hz',\n    '04': '400 Hz',\n    '05': '500 Hz',\n    '06': '600 Hz',\n    '07': '700 Hz',\n};\n\nconst prmtrc_eq2_freq_map = {\n    '00': 'OFF',\n    '01': '700 Hz',\n    '02': '800 Hz',\n    '03': '900 Hz',\n    '04': '1000 Hz',\n    '05': '1100 Hz',\n    '06': '1200 Hz',\n    '07': '1300 Hz',\n    '08': '1400 Hz',\n    '09': '1500 Hz',\n};\n\nconst prmtrc_eq3_freq_map = {\n    '00': 'OFF',\n    '01': '1500 Hz',\n    '02': '1600 Hz',\n    '03': '1700 Hz',\n    '04': '1800 Hz',\n    '05': '1900 Hz',\n    '06': '2000 Hz',\n    '07': '2100 Hz',\n    '08': '2200 Hz',\n    '09': '2300 Hz',\n    '10': '2400 Hz',\n    '11': '2500 Hz',\n    '12': '2600 Hz',\n    '13': '2700 Hz',\n    '14': '2800 Hz',\n    '15': '2900 Hz',\n    '16': '3000 Hz',\n    '17': '3100 Hz',\n    '18': '3800 Hz',\n};\n\n// End of maps\n\nconst mi_table = {\n    1: {\n        toUi: toUiInt,\n        fromUi: fromUiIntBy20,\n    },\n    2: {\n        toUi: toUiInt,\n        fromUi: fromUiIntBy20,\n    },\n    3: {\n        toUi: toUiInt,\n        fromUi: fromUiIntBy20,\n    },\n    4: {\n        rig_ui_map: {\n            '0': 'SCOPE',\n            '1': 'FUNCTION',\n        },\n    },\n    5: {\n        toUi: toUiInt,\n        fromUi: pad1,\n    },\n    6: {\n        rig_ui_map: standard_colors_map,\n    },\n    7: {\n        rig_ui_map: {\n            '0': '1',\n            '1': '2',\n        },\n    },\n    8: {\n        toUi: toUiInt,\n        fromUi: pad2,\n    },\n    9: {\n        rig_ui_map: {\n            '0': 'OFF',\n            '1': '0.5sec',\n            '2': '1.0sec',\n            '3': '2.0sec',\n        },\n    },\n    10: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    11: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    12: {\n        rig_ui_map: {\n            '0': 'OFF',\n            '1': 'BUG',\n            '2': 'ELEKEY-A',\n            '3': 'ELEKEY-B',\n            '4': 'ELEKEY-Y',\n            '5': 'ACS',\n        },\n    },\n    13: {\n        rig_ui_map: normal_reverse_map,\n    },\n    14: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    15: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    16: {\n        rig_ui_map: {\n            '0': '1290',\n            '1': 'AUNO',\n            '2': 'AUNT',\n            '3': 'A2NO',\n            '4': 'A2NT',\n            '5': '12NO',\n            '6': '12NT',\n        },\n    },\n    17: {\n        toUi: toUiInt,\n        fromUi: pad4,\n    },\n    18: {\n        rig_ui_map: cw_memory_map,\n    },\n    19: {\n        rig_ui_map: cw_memory_map,\n    },\n    20: {\n        rig_ui_map: cw_memory_map,\n    },\n    21: {\n        rig_ui_map: cw_memory_map,\n    },\n    22: {\n        rig_ui_map: cw_memory_map,\n    },\n    23: {\n        rig_ui_map: {\n            '0': '1 ms',\n            '1': '3 ms',\n            '2': '10 ms',\n        },\n    },\n    24: {\n        rig_ui_map: {\n            '0': '10 dB',\n            '1': '30 dB',\n            '2': '50 dB',\n        },\n    },\n    25: {\n        toUi: toUiInt,\n        fromUi: pad2,\n    },\n    26: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    27: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    28: {\n        rig_ui_map: {\n            '0': 'GPS1',\n            '1': 'GPS2',\n            '2': 'RS232C',\n        },\n    },\n    29: {\n        rig_ui_map: baud_rate_map,\n    },\n    30: {\n        rig_ui_map: serial_timeout_map,\n    },\n    31: {\n        rig_ui_map: baud_rate_map,\n    },\n    32: {\n        rig_ui_map: serial_timeout_map,\n    },\n    33: {\n        rig_ui_map: enable_disable_map,\n    },\n    34: {\n        rig_ui_map: enable_disable_map,\n    },\n    35: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    36: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    37: {\n        rig_ui_map: enable_disable_map,\n    },\n    38: {\n        rig_ui_map: {\n            '0': 'PAUSE',\n            '1': 'TIME',\n        },\n    },\n    39: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    40: {\n        rig_ui_map: {\n            '0': 'RX',\n            '1': 'TX',\n            '2': 'TRX',\n        },\n    },\n    41: {\n        toUi: toUiLCutFreq,\n        fromUi: fromUiLCutFreq,\n    },\n    42: {\n        rig_ui_map: slope_map,\n    },\n    43: {\n        toUi: toUiHCutFreq,\n        fromUi: fromUiHCutFreq,\n    },\n    44: {\n        rig_ui_map: slope_map,\n    },\n    45: {\n        rig_ui_map: mic_select_map,\n    },\n    46: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    47: {\n        rig_ui_map: ptt_select_map,\n    },\n    48: {\n        rig_ui_map: port_select_map,\n    },\n    49: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    50: {\n        toUi: toUiLCutFreq,\n        fromUi: fromUiLCutFreq,\n    },\n    51: {\n        rig_ui_map: slope_map,\n    },\n    52: {\n        toUi: toUiHCutFreq,\n        fromUi: fromUiHCutFreq,\n    },\n    53: {\n        rig_ui_map: slope_map,\n    },\n    54: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    55: {\n        rig_ui_map: {\n            '0': 'OFF',\n            '1': '50 MHz',\n            '2': 'ON',\n        },\n    },\n    56: {\n        rig_ui_map: {\n            '0': 'SEMI BREAK-IN',\n            '1': 'FULL BREAK-IN',\n        },\n    },\n    57: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    58: {\n        rig_ui_map: {\n            '0': '1 ms',\n            '1': '2 ms',\n            '2': '4 ms',\n            '3': '6 ms',\n        },\n    },\n    59: {\n        rig_ui_map: {\n            '0': 'DIRECT FREQ',\n            '1': 'PITCH OFFSET',\n        },\n    },\n    60: {\n        rig_ui_map: {\n            '0': 'OFF',\n            '1': 'DAKY',\n            '2': 'RTS',\n            '3': 'DTR',\n        },\n    },\n    61: {\n        rig_ui_map: {\n            '0': '15 ms',\n            '1': '20 ms',\n            '2': '25 ms',\n            '3': '30 ms',\n        },\n    },\n    62: {\n        rig_ui_map: {\n            '0': 'PSK',\n            '1': 'OTHER',\n        },\n    },\n    63: {\n        rig_ui_map: {\n            '0': '1000 Hz',\n            '1': '1500 hz',\n            '2': '2000 Hz',\n        },\n    },\n    64: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    65: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    66: {\n        toUi: toUiLCutFreq,\n        fromUi: fromUiLCutFreq,\n    },\n    67: {\n        rig_ui_map: slope_map,\n    },\n    68: {\n        toUi: toUiHCutFreq,\n        fromUi: fromUiHCutFreq,\n    },\n    69: {\n        rig_ui_map: slope_map,\n    },\n    70: {\n        rig_ui_map: mic_select_map,\n    },\n    71: {\n        rig_ui_map: ptt_select_map,\n    },\n    72: {\n        rig_ui_map: port_select_map,\n    },\n    73: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    74: {\n        rig_ui_map: mic_select_map,\n    },\n    75: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    76: {\n        rig_ui_map: ptt_select_map,\n    },\n    77: {\n        rig_ui_map: port_select_map,\n    },\n    78: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    79: {\n        rig_ui_map: {\n            '0': '1200',\n            '1': '9600',\n        },\n    },\n    80: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    81: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    82: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    83: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    84: {\n        rig_ui_map: on_off_map,\n    },\n    85: {\n        rig_ui_map: on_off_map,\n    },\n    86: {\n        rig_ui_map: {\n            '0': 'Tn-Rn',\n            '1': 'Tn-Riv',\n            '2': 'Tiv-Rn',\n            '3': 'Tiv-Riv',\n        },\n    },\n    87: {\n        toUi: defaultToUi,\n    },\n    88: {\n        rig_ui_map: {\n            '0': 'DISTANCE',\n            '1': 'STRENGTH',\n        },\n    },\n    89: {\n        rig_ui_map: {\n            '0': 'km',\n            '1': 'mile',\n        },\n    },\n    90: {\n        rig_ui_map: {\n            '0': 'AUTO',\n            '1': 'MANUAL',\n            '2': 'DN',\n            '3': 'VW',\n            '4': 'ANALOG',\n        },\n    },\n    91: {\n        rig_ui_map: on_off_map,\n    },\n    92: {\n        toUi: toUiLCutFreq,\n        fromUi: fromUiLCutFreq,\n    },\n    93: {\n        rig_ui_map: slope_map,\n    },\n    94: {\n        toUi: toUiHCutFreq,\n        fromUi: fromUiHCutFreq,\n    },\n    95: {\n        rig_ui_map: slope_map,\n    },\n    96: {\n        rig_ui_map: {\n            '0': 'SHIFT',\n            '1': 'DTR',\n            '2': 'DTR',\n        },\n    },\n    97: {\n        rig_ui_map: normal_reverse_map,\n    },\n    98: {\n        rig_ui_map: normal_reverse_map,\n    },\n    99: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    100: {\n        rig_ui_map: {\n            '0': '170 Hz',\n            '1': '200 Hz',\n            '2': '425 Hz',\n            '3': '850 Hz',\n        },\n    },\n    101: {\n        rig_ui_map: {\n            '0': '1275 Hz',\n            '1': '2125 Hz',\n        },\n    },\n    102: {\n        toUi: toUiLCutFreq,\n        fromUi: fromUiLCutFreq,\n    },\n    103: {\n        rig_ui_map: slope_map,\n    },\n    104: {\n        toUi: toUiHCutFreq,\n        fromUi: fromUiHCutFreq,\n    },\n    105: {\n        rig_ui_map: slope_map,\n    },\n    106: {\n        rig_ui_map: mic_select_map,\n    },\n    107: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    108: {\n        rig_ui_map: ptt_select_map,\n    },\n    109: {\n        rig_ui_map: port_select_map,\n    },\n    110: {\n        rig_ui_map: {\n            '1': '50 ~ 3000',\n            '2': '100 ~ 2900',\n            '3': '200 ~ 2800',\n            '4': '300 ~ 2700',\n            '5': '400 ~ 2600',\n        },\n    },\n    111: {\n        rig_ui_map: {\n            '0': 'NARROW',\n            '1': 'MEDIUM',\n            '2': 'WIDE',\n        },\n    },\n    112: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    113: {\n        toUi: toUiInt,\n        fromUi: pad2,\n    },\n    114: {\n        rig_ui_map: {\n            '0': 'NARROW',\n            '1': 'WIDE',\n        },\n    },\n    115: {\n        rig_ui_map: {\n            '0': 'SPECTRUM',\n            '1': 'WATER FALL',\n        },\n    },\n    116: {\n        rig_ui_map: {\n            '03': '50 kHx',\n            '04': '100 kHx',\n            '05': '200 kHx',\n            '06': '500 kHx',\n            '07': '1000 kHx',\n        },\n    },\n    117: {\n        rig_ui_map: standard_colors_map,\n    },\n    118: {\n        rig_ui_map: {\n            '0': 'BLUE',\n            '1': 'GRAY',\n            '2': 'GREEN',\n            '3': 'ORANGE',\n            '4': 'PURPLE',\n            '5': 'RED',\n            '6': 'SKY BLUE',\n            '7': 'MULTI',\n        },\n    },\n    119: {\n        rig_ui_map: prmtrc_eq1_freq_map,\n    },\n    120: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    121: {\n        toUi: toUiInt,\n        fromUi: pad2,\n    },\n    122: {\n        rig_ui_map: prmtrc_eq2_freq_map,\n    },\n    123: {\n        toUi: toUiInt,\n        fromUi: defaultFromUi,\n    },\n    124: {\n        toUi: toUiInt,\n        fromUi: pad2,\n    },\n    125: {\n        rig_ui_map: prmtrc_eq3_freq_map,\n    },\n    126: {\n        toUi: toUiInt,\n        fromUi: defaultFromUi,\n    },\n    127: {\n        toUi: toUiInt,\n        fromUi: pad2,\n    },\n    128: {\n        rig_ui_map: prmtrc_eq1_freq_map,\n    },\n    129: {\n        toUi: toUiInt,\n        fromUi: defaultFromUi,\n    },\n    130: {\n        toUi: toUiInt,\n        fromUi: pad2,\n    },\n    131: {\n        rig_ui_map: prmtrc_eq2_freq_map,\n    },\n    132: {\n        toUi: toUiInt,\n        fromUi: defaultFromUi,\n    },\n    133: {\n        toUi: toUiInt,\n        fromUi: pad2,\n    },\n    134: {\n        rig_ui_map: prmtrc_eq3_freq_map,\n    },\n    135: {\n        toUi: toUiInt,\n        fromUi: defaultFromUi,\n    },\n    136: {\n        toUi: toUiInt,\n        fromUi: pad2,\n    },\n    137: {\n        toUi: toUiInt,\n        fromUi: fromUiMaxPower(100),\n    },\n    138: {\n        toUi: toUiInt,\n        fromUi: fromUiMaxPower(100),\n    },\n    139: {\n        toUi: toUiInt,\n        fromUi: fromUiMaxPower(50),\n    },\n    140: {\n        toUi: toUiInt,\n        fromUi: fromUiMaxPower(50),\n    },\n    141: {\n        rig_ui_map: {\n            '0': 'OFF',\n            '1': 'INTERNAL',\n            '2': 'EXTERNAL',\n            '3': 'ATAS',\n            '4': 'LAMP',\n        },\n    },\n    142: {\n        rig_ui_map: {\n            '0': 'MIC',\n            '1': 'DATA',\n        },\n    },\n    143: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    144: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    145: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    146: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    147: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    148: {\n        toUi: toUiInt,\n        fromUi: pad3,\n    },\n    149: {\n        rig_ui_map: enable_disable_map,\n    },\n    150: {\n        rig_ui_map: {\n            '0': 'MANUAL',\n            '1': 'PRESET',\n        },\n    },\n    151: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n    152: {\n        rig_ui_map: {\n            '0': 'HISTORY',\n            '1': 'ACTIVITY',\n        },\n    },\n    153: {\n        toUi: defaultToUi,\n        fromUi: defaultFromUi,\n    },\n};\n\nconst MenuItems = {\n    toUi: function (no, value) {\n        const mi = mi_table[no];\n\n        if(isEmptyValue(mi)) {\n            throw new Error('MenuItems.toUi(' + no + ') not found');\n        }\n\n        if (isEmptyValue(value)) {\n            throw new Error('MenuItems.toUi(' + no + ') has no value');\n        }\n\n        if(mi.hasOwnProperty('rig_ui_map')) {\n            if(mi.rig_ui_map.hasOwnProperty(value)) {\n                return mi.rig_ui_map[value];\n            }\n        }\n        else if(mi.hasOwnProperty('toUi')) {\n            return mi.toUi(value);\n        }\n        throw new Error('MenuItems.toUi(' + no + '): unknown value: \"' + value + '\"');\n    },\n\n    fromUi: function (no, value) {\n        const mi = mi_table[no];\n\n        if(isEmptyValue(mi)) {\n            throw new Error('MenuItems.fromUi(' + no + ') not found');\n        }\n\n        if (value !== null) {\n            if(mi.hasOwnProperty('rig_ui_map')) {\n                if(!mi.hasOwnProperty('ui_rig_map')) {\n                    mi.ui_rig_map = {};\n\n                    for(const [k,v] of Object.entries(mi.rig_ui_map)) {\n                        mi.ui_rig_map[v] = k;\n                    }\n                }\n\n                if(mi.ui_rig_map.hasOwnProperty(value)) {\n                    return mi.ui_rig_map[value];\n                }\n            }\n            else if(mi.hasOwnProperty('fromUi')) {\n                return mi.fromUi(value);\n            }\n            throw new Error('MenuItems.fromUi(' + no + '): unknown value: \"' + value + '\"');\n        }\n\n        throw new Error('MenuItems.fromUi(' + no + ') has no value');\n    },\n};\n\nflow.set('MenuItems', MenuItems);",
        "finalize": "",
        "x": 130,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4a76514b.b8135",
        "type": "http in",
        "z": "754980e0.50707",
        "name": "",
        "url": "/noderig/op_modes.json",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1340,
        "wires": [
            [
                "45d11a6b.4d23d4"
            ]
        ]
    },
    {
        "id": "ce9ae1e7.55244",
        "type": "http response",
        "z": "754980e0.50707",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 590,
        "y": 1340,
        "wires": []
    },
    {
        "id": "45d11a6b.4d23d4",
        "type": "function",
        "z": "754980e0.50707",
        "name": "",
        "func": "const op_modes = global.get('op_modes', 'persist');\n\nmsg.payload = op_modes;\nmsg.filename = 'op_modes.json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 1340,
        "wires": [
            [
                "ce9ae1e7.55244"
            ]
        ]
    },
    {
        "id": "f593a822.2e4d98",
        "type": "http in",
        "z": "754980e0.50707",
        "name": "",
        "url": "/noderig/memory_channels.json",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1400,
        "wires": [
            [
                "b2af11c7.32fe"
            ]
        ]
    },
    {
        "id": "b2af11c7.32fe",
        "type": "function",
        "z": "754980e0.50707",
        "name": "",
        "func": "const memory_channels = global.get('memory_channels', 'persist');\n\nmsg.payload = memory_channels;\nmsg.filename = 'memory_channels.json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 1400,
        "wires": [
            [
                "a1ea4bce.0bb8e8"
            ]
        ]
    },
    {
        "id": "a1ea4bce.0bb8e8",
        "type": "http response",
        "z": "754980e0.50707",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 590,
        "y": 1400,
        "wires": []
    }
]